[{"content":"前言 在 macOS 系统中，launchd 是管理系统和用户后台任务（即守护进程 Daemons 与代理进程 Agents）的核心机制。想要在 macOS 上创建或管理定时任务、服务程序或后台脚本，理解 launchd 和其对应的 .plist 配置文件是必不可少的。 本文内容参考于 Creating Launch Daemons and Agents↗ 为什呢使用launchd 相比传统方式（如 cron、inetd），launchd 提供了更现代和统一的方式来启动和管理进程，优势包括：\n支持按需启动（On-Demand）：节省系统资源； 无需处理依赖顺序：launchd 会自动协调启动顺序； 统一配置入口：通过标准化的 .plist 文件配置任务； 简化权限处理：系统层任务由 launchd（以 root 身份）启动后传递资源给子进程； 支持多种触发方式：时间、文件变动、目录状态、Socket 等。 LaunchDaemons vs LaunchAgents LaunchDaemons：系统级守护进程（/Library/System/LaunchDaemons），在无用户登录时也能运行。 LaunchAgents：用户级代理进程（/Library/LaunchAgents 或 ~/Library/LaunchAgents），需要用户登录后才会运行。 plist 文件结构与关键字段 .plist 文件是以 XML 格式编写的，以下是几个关键字段：\nKey 作用说明 Label 唯一标识任务（必须） ProgramArguments 启动命令和参数（必须） KeepAlive 是否持续运行（默认为 false） StartInterval 每隔多少秒执行一次任务 StartCalendarInterval 类似 cron 的定时机制（如每月 7 日 13:45） WatchPaths 监听指定路径的变动 QueueDirectories 监听目录非空触发运行 StandardOutPath / StandardErrorPath 输出日志路径 Sockets 声明监听的端口（支持 TCP/UDP） inetdCompatibility 模拟旧的 inetd 行为 Hello World /Library/LaunchDaemons/com.example.hello.plist 13 lines \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.example.hello\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;hello\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;world\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 每 5 分钟执行一次 /Library/LaunchDaemons/com.example.hello.plist 2 lines \u0026lt;key\u0026gt;StartInterval\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;300\u0026lt;/integer\u0026gt; 监听某文件变化 /Library/LaunchDaemons/com.example.hello.plist 4 lines \u0026lt;key\u0026gt;WatchPaths\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/etc/hostconfig\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; 如何加载与管理plist # 加载任务 sudo launchctl load /Library/LaunchDaemons/com.example.hello.plist # 卸载任务 sudo launchctl unload /Library/LaunchDaemons/com.example.hello.plist # 查看任务状态 launchctl list | grep com.example.hello ","permalink":"https://downmars.github.io/zh/posts/2025_03_23-macos_plist/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在 macOS 系统中，launchd 是管理系统和用户后台任务（即守护进程 Daemons 与代理进程 Agents）的核心机制。想要在 macOS 上创建或管理定时任务、服务程序或后台脚本，理解 launchd 和其对应的 .plist 配置文件是必不可少的。\n\u003cspan class=\"sidenote-number\"\u003e\u003csmall class=\"sidenote\"\u003e本文内容参考于\u003ca href=\"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Creating Launch Daemons and Agents\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\u003c/small\u003e\u003c/span\u003e\n\n\u003c/p\u003e","title":"Macos plist 配置"},{"content":"","permalink":"https://downmars.github.io/zh/posts/2025_03_19-openharmony_with_stm32h743/","summary":"","title":"OpenHarmony移植到STM32H743系列"},{"content":"正则表达式（英语：regular expression，常简写为regex、regexp或RE），又称规律表达式、正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学概念，用简单字符串来描述、匹配文中全部匹配指定格式的字符串，现在很多文本编辑器都支持用正则表达式搜索、取代匹配指定格式的字符串。\n译名问题 描述字符串规律的表达式原应顺理成章称为规律表达式（pattern expression／rule expression），但却叫成有欠准确的regular expression，导致现在有多种中译名，如将regular译成规律、规则、正规、正则或常规，将expression译成表达式、表示式、表示法或表达式等。\nPCRE 在大多数开源工具或者编辑器中，默认支持的正则表达式通常是 PCRE↗ (Perl-Compatible Regular Expressions)或者其简化版本，其语法强大、兼容性好，通常适用于文本处理。 本篇内容均来源于 维基百科-正则表达式↗ 基础字符与匹配位置 字符 描述 示例 \\ 转义字符 \\. 匹配一个点 .，\\\\ 匹配反斜杠 ^ 匹配字符串开头 ^abc 匹配以 abc 开头的字符串 $ 匹配字符串结尾 abc$ 匹配以 abc 结尾的字符串 . 匹配除换行外的任意字符 a.b 匹配 aab, acb, 不匹配 a\\nb 重复匹配（量词） 字符 描述 示例 * 匹配零次或多次 lo*l 匹配 ll, lol, lool, loooool + 匹配一次或多次 lo+l 匹配 lol, lool，不匹配 ll ? 匹配零次或一次 do(es)? 匹配 do 或 does {n} 匹配n次 a{3} 匹配 aaa {n,} 匹配至少n次 a{2,} 匹配 aa, aaa, aaaa {n,m} 匹配n到m次 a{2,4} 匹配 aa, aaa, aaaa *? +? ?? 非贪婪匹配 \u0026lt;.*?\u0026gt; 匹配最短标签，如 \u0026lt;div\u0026gt; 而不是 \u0026lt;div\u0026gt;content\u0026lt;/div\u0026gt; 分组与引用 字符 描述 示例 (abc) 捕获分组 (abc)+ 匹配 abcabc (?:abc) 非捕获分组 (?:abc)+ 也匹配 abcabc，但不捕获 \\1, \\2\u0026hellip; 向后引用 (a)\\1 匹配 aa，(.)\\1 匹配两个相同字符 (?\u0026lt;name\u0026gt;...) 命名分组 (?\u0026lt;word\u0026gt;\\w+) 捕获一个单词 \\k\u0026lt;name\u0026gt; 命名引用 (?\u0026lt;d\u0026gt;\\d)\\k\u0026lt;d\u0026gt; 匹配两个相同数字，如 33 断言（不消费字符） 字符 描述 示例 (?=abc) 正向肯定预查 \\w+(?=ing\\b) 匹配 sing 中的 sing（去掉ing） (?!abc) 正向否定预查 \\w+(?!ing\\b) 匹配不以 ing 结尾的单词 (?\u0026lt;=abc) 反向肯定预查 (?\u0026lt;=abc)\\w+ 匹配 abcXYZ 中的 XYZ (?\u0026lt;!abc) 反向否定预查 (?\u0026lt;!abc)\\w+ 匹配不在 abc 后的单词 选择与字符集 字符 描述 示例 x|y 匹配 x 或 y cat|dog 匹配 cat 或 dog [abc] 匹配 a 或 b 或 c 匹配 a, b 或 c 中的任意一个 [^abc] 非字符集 匹配除 a, b, c 外的任意字符 [a-z] 范围匹配 匹配所有小写字母 [^a-z] 非范围匹配 匹配非小写字母的字符 常用转义字符 字符 描述 示例 \\d 数字字符 [0-9] \\d+ 匹配数字，如 123 \\D 非数字字符 \\D+ 匹配字母或符号，如 abc! \\w 单词字符（含汉字） \\w+ 匹配 abc123_汉 \\W 非单词字符 匹配空格、标点等 \\s 空白字符 匹配空格、\\t, \\n 等 \\S 非空白字符 匹配任何非空格字符 \\t 制表符 匹配 Tab \\n 换行符 匹配换行 \\r 回车符 匹配回车 \\f 换页符 匹配打印页结束符 \\v 垂直制表符 很少见，匹配 \\x0b 编码与进阶引用 字符 描述 示例 \\xnn 十六进制字符 \\x41 匹配 A \\uXXXX Unicode字符 \\u00A9 匹配 © \\0~\\777 八进制字符 \\040 匹配空格（十进制32） 其他特殊用法 字符 描述 示例 \\b 单词边界 \\bhi\\b 匹配独立单词 hi \\B 非单词边界 \\Bhi\\B 匹配 behind 中的 hi \\cX 控制字符 \\cM 匹配回车符（Ctrl+M） ","permalink":"https://downmars.github.io/zh/posts/2025_03_19-regex/","summary":"\u003cblockquote class=\"quote\"\u003e\u003cp\u003e正则表达式（英语：regular expression，常简写为regex、regexp或RE），又称规律表达式、正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学概念，用简单字符串来描述、匹配文中全部匹配指定格式的字符串，现在很多文本编辑器都支持用正则表达式搜索、取代匹配指定格式的字符串。\u003c/p\u003e","title":"正则表达式"},{"content":"结构框图 sequenceDiagram participant User participant GUI participant Process User-\u0026gt;\u0026gt;GUI: 点击\u0026#34;浏览\u0026#34;按钮 GUI-\u0026gt;\u0026gt;User: 显示文件选择对话框 User-\u0026gt;\u0026gt;GUI: 选择valid.launch GUI-\u0026gt;\u0026gt;GUI: 进入FileSelected状态 User-\u0026gt;\u0026gt;GUI: 点击\u0026#34;执行\u0026#34;按钮 GUI-\u0026gt;\u0026gt;Process: 启动roslaunch Process--\u0026gt;\u0026gt;GUI: 进程启动成功 GUI-\u0026gt;\u0026gt;GUI: 进入Running状态 loop 日志输出 Process--\u0026gt;\u0026gt;GUI: 实时传输标准输出 end Process--\u0026gt;\u0026gt;GUI: 进程退出(返回码0) GUI-\u0026gt;\u0026gt;GUI: 进入Completed状态 User-\u0026gt;\u0026gt;GUI: 点击\u0026#34;×\u0026#34;删除按钮 GUI-\u0026gt;\u0026gt;Process: 终止进程(如果运行中) GUI-\u0026gt;\u0026gt;GUI: 进入Removed状态 代码讲解 以下是基于Mermaid状态图的核心逻辑代码实现，结合状态图的关键部分进行详细说明：\n状态图关键部分与代码对应关系 Idle 状态 描述：初始状态，未选择有效launch文件。 关键代码： src/LaunchItem.cpp 8 lines // LaunchItem构造函数 LaunchItem::LaunchItem(QWidget *parent) : QWidget(parent), ui(new Ui::LaunchItem), process(new QProcess(this)) { ui-\u0026gt;setupUi(this); ui-\u0026gt;lineEdit-\u0026gt;clear(); // 清空路径输入框 ui-\u0026gt;textEdit-\u0026gt;clear(); // 清空输出窗口 } FileSelected 状态 描述：用户通过浏览按钮选择了一个有效的launch文件。 关键代码： src/LaunchItem.cpp 11 lines void LaunchItem::onBrowseClicked() { QString path = QFileDialog::getOpenFileName( this, \u0026#34;选择Launch文件\u0026#34;, QDir::homePath(), \u0026#34;ROS Launch Files (*.launch)\u0026#34; ); if (!path.isEmpty()) { ui-\u0026gt;lineEdit-\u0026gt;setText(path); // 更新路径输入框 // 此时进入FileSelected状态 } } Executing 状态 描述：用户点击“执行”按钮，尝试启动roslaunch进程。 关键代码： src/LaunchItem.cpp 13 lines void LaunchItem::onExecuteClicked() { QString launchPath = ui-\u0026gt;lineEdit-\u0026gt;text(); if (launchPath.isEmpty() || !QFile::exists(launchPath)) { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;错误：无效的launch文件路径\u0026#34;); return; // 进入Error状态 } QString cmd = QString(\u0026#34;source /opt/ros/noetic/setup.bash \u0026amp;\u0026amp; roslaunch %1\u0026#34;) .arg(launchPath); process-\u0026gt;start(\u0026#34;bash\u0026#34;, QStringList() \u0026lt;\u0026lt; \u0026#34;-c\u0026#34; \u0026lt;\u0026lt; cmd); // 进入Executing状态 } Running 状态 描述：roslaunch进程成功启动，正在运行并输出日志。 关键代码： src/LaunchItem.cpp 13 lines void LaunchItem::readProcessOutput() { QString output = process-\u0026gt;readAllStandardOutput(); QString error = process-\u0026gt;readAllStandardError(); if (!output.isEmpty()) { ui-\u0026gt;textEdit-\u0026gt;append(output); // 实时输出标准日志 } if (!error.isEmpty()) { ui-\u0026gt;textEdit-\u0026gt;setTextColor(Qt::red); ui-\u0026gt;textEdit-\u0026gt;append(error); // 实时输出错误日志 ui-\u0026gt;textEdit-\u0026gt;setTextColor(Qt::black); } } Completed 状态 描述：roslaunch进程正常退出（返回码0）。 关键代码： src/LaunchItem.cpp 9 lines connect(process, QOverload\u0026lt;int\u0026gt;::of(\u0026amp;QProcess::finished), [this](int exitCode) { if (exitCode == 0) { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;进程正常退出\u0026#34;); // 进入Completed状态 } else { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;进程异常退出，返回码: \u0026#34; + QString::number(exitCode)); // 进入Error状态 } }); Error 状态 描述：出现错误（无效路径或进程异常退出）。 关键代码： src/LaunchItem.cpp 9 lines void LaunchItem::onExecuteClicked() { QString launchPath = ui-\u0026gt;lineEdit-\u0026gt;text(); if (launchPath.isEmpty() || !QFile::exists(launchPath)) { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;错误：无效的launch文件路径\u0026#34;); // 进入Error状态 return; } // ... } Removed 状态 描述：用户点击“×”按钮，删除当前LaunchItem。 关键代码： src/MainWindow.cpp 8 lines void LaunchItem::removeLaunchItem(QWidget *item) { if (process-\u0026gt;state() == QProcess::Running) { process-\u0026gt;terminate(); // 终止进程 process-\u0026gt;waitForFinished(1000); } item-\u0026gt;deleteLater(); // 删除UI组件 // 进入Removed状态 } 状态流转的核心逻辑 从 Idle 到 FileSelected 触发条件：用户通过浏览按钮选择了一个有效的launch文件。 代码实现： src/LaunchItem.cpp 7 lines void LaunchItem::onBrowseClicked() { QString path = QFileDialog::getOpenFileName(...); if (!path.isEmpty()) { ui-\u0026gt;lineEdit-\u0026gt;setText(path); // 更新路径输入框 // 进入FileSelected状态 } } 从 FileSelected 到 Executing 触发条件：用户点击“执行”按钮。 代码实现： src/LaunchItem.cpp 9 lines void LaunchItem::onExecuteClicked() { QString launchPath = ui-\u0026gt;lineEdit-\u0026gt;text(); if (launchPath.isEmpty() || !QFile::exists(launchPath)) { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;错误：无效的launch文件路径\u0026#34;); return; // 进入Error状态 } process-\u0026gt;start(\u0026#34;bash\u0026#34;, QStringList() \u0026lt;\u0026lt; \u0026#34;-c\u0026#34; \u0026lt;\u0026lt; cmd); // 进入Executing状态 } 从 Executing 到 Running 触发条件：roslaunch进程成功启动。 代码实现： src/LaunchItem.cpp 4 lines connect(process, \u0026amp;QProcess::started, [this] { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;进程已启动\u0026#34;); // 进入Running状态 }); 从 Running 到 Completed/Error 触发条件：进程退出（正常或异常）。 代码实现： src/LaunchItem.cpp 9 lines connect(process, QOverload\u0026lt;int\u0026gt;::of(\u0026amp;QProcess::finished), [this](int exitCode) { if (exitCode == 0) { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;进程正常退出\u0026#34;); // 进入Completed状态 } else { ui-\u0026gt;textEdit-\u0026gt;append(\u0026#34;进程异常退出，返回码: \u0026#34; + QString::number(exitCode)); // 进入Error状态 } }); 从任何状态到 Removed 触发条件：用户点击“×”按钮。 代码实现： src/LaunchItem.cpp 4 lines connect(ui-\u0026gt;btnRemove, \u0026amp;QPushButton::clicked, [this] { emit removeRequested(); // 通知主窗口删除当前item // 进入Removed状态 }); 核心逻辑总结 状态 触发条件 关键代码 Idle 初始化 ui-\u0026gt;lineEdit-\u0026gt;clear(); ui-\u0026gt;textEdit-\u0026gt;clear(); FileSelected 用户选择有效launch文件 ui-\u0026gt;lineEdit-\u0026gt;setText(path); Executing 用户点击“执行”按钮 process-\u0026gt;start(\u0026quot;bash\u0026quot;, QStringList() \u0026lt;\u0026lt; \u0026quot;-c\u0026quot; \u0026lt;\u0026lt; cmd); Running 进程成功启动 connect(process, \u0026amp;QProcess::started, [this] { ... }); Completed 进程正常退出（返回码0） connect(process, QOverload\u0026lt;int\u0026gt;::of(\u0026amp;QProcess::finished), [this](int code) { ... }); Error 无效路径或进程异常退出 ui-\u0026gt;textEdit-\u0026gt;append(\u0026quot;错误：无效的launch文件路径\u0026quot;); Removed 用户点击“×”按钮 item-\u0026gt;deleteLater(); 通过以上代码和状态流转的对应关系，可以清晰地理解整个系统的核心逻辑。如果需要进一步扩展功能（如批量执行、状态持久化等），可以基于此框架进行开发。\n","permalink":"https://downmars.github.io/zh/posts/2025_03_05-qt_with_ros/","summary":"\u003ch2 id=\"结构框图\"\u003e结构框图\u003c/h2\u003e\n\n\u003cpre class=\"mermaid\"\u003esequenceDiagram\n    participant User\n    participant GUI\n    participant Process\n    \n    User-\u0026gt;\u0026gt;GUI: 点击\u0026#34;浏览\u0026#34;按钮\n    GUI-\u0026gt;\u0026gt;User: 显示文件选择对话框\n    User-\u0026gt;\u0026gt;GUI: 选择valid.launch\n    GUI-\u0026gt;\u0026gt;GUI: 进入FileSelected状态\n    \n    User-\u0026gt;\u0026gt;GUI: 点击\u0026#34;执行\u0026#34;按钮\n    GUI-\u0026gt;\u0026gt;Process: 启动roslaunch\n    Process--\u0026gt;\u0026gt;GUI: 进程启动成功\n    GUI-\u0026gt;\u0026gt;GUI: 进入Running状态\n    \n    loop 日志输出\n        Process--\u0026gt;\u0026gt;GUI: 实时传输标准输出\n    end\n    \n    Process--\u0026gt;\u0026gt;GUI: 进程退出(返回码0)\n    GUI-\u0026gt;\u0026gt;GUI: 进入Completed状态\n    \n    User-\u0026gt;\u0026gt;GUI: 点击\u0026#34;×\u0026#34;删除按钮\n    GUI-\u0026gt;\u0026gt;Process: 终止进程(如果运行中)\n    GUI-\u0026gt;\u0026gt;GUI: 进入Removed状态\n\u003c/pre\u003e\n\n\n\u003ch2 id=\"代码讲解\"\u003e代码讲解\u003c/h2\u003e\n\u003cp\u003e以下是基于Mermaid状态图的核心逻辑代码实现，结合状态图的关键部分进行详细说明：\u003c/p\u003e","title":"使用QT来创建ROS的节点程序"},{"content":"Mermaid Generate diagrams from markdown-like text.\nMermaid↗ 是一种基于JavaScript的图标工具，它以Markdown启发的文本定义和渲染器来创建和修改复杂图。对于初学者，有需要的可以参考 视频教程↗ 和 初学者指南↗ 。接下来我将测试一下支持的Mermaid例子。\n流程图(Flowchart) flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] Flowchart 7 lines \\```mermaid flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] \\``` 序列图(Sequence diagram) sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop HealthCheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! Sequence diagram 11 lines \\```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop HealthCheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! \\``` 甘特图(Gantt chart) gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d Gantt chart 10 lines \\```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d \\``` 类图(Class diagram) classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;Interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am I? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } Class diagram 18 lines \\```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;Interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am I? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } \\``` 状态图(State diagram) stateDiagram-v2 [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] State diagram 10 lines \\```mermaid stateDiagram-v2 [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] \\``` 饼图(Pie chart) pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85.9 \u0026#34;Rats\u0026#34; : 15 Pie chart 6 lines \\```mermaid pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85.9 \u0026#34;Rats\u0026#34; : 15 \\``` 节点图(Git graph) gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit Git graph 13 lines \\```mermaid gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit \\``` 条形图(Bar chart) gantt title Git Issues - days since last update dateFormat X axisFormat %s section Issue19062 71 : 0, 71 section Issue19401 36 : 0, 36 section Issue193 34 : 0, 34 section Issue7441 9 : 0, 9 section Issue1300 5 : 0, 5 Bar chart 17 lines \\```mermaid gantt title Git Issues - days since last update dateFormat X axisFormat %s section Issue19062 71 : 0, 71 section Issue19401 36 : 0, 36 section Issue193 34 : 0, 34 section Issue7441 9 : 0, 9 section Issue1300 5 : 0, 5 \\``` 用户旅程图(User Journey diagram) journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me User Journey diagram 11 lines \\```mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me \\``` C4架构图(C4 diagram) C4Context title System Context diagram for Internet Banking System Person(customerA, \u0026#34;Banking Customer A\u0026#34;, \u0026#34;A customer of the bank, with personal bank accounts.\u0026#34;) Person(customerB, \u0026#34;Banking Customer B\u0026#34;) Person_Ext(customerC, \u0026#34;Banking Customer C\u0026#34;) System(SystemAA, \u0026#34;Internet Banking System\u0026#34;, \u0026#34;Allows customers to view information about their bank accounts, and make payments.\u0026#34;) Person(customerD, \u0026#34;Banking Customer D\u0026#34;, \u0026#34;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026#34;) Enterprise_Boundary(b1, \u0026#34;BankBoundary\u0026#34;) { SystemDb_Ext(SystemE, \u0026#34;Mainframe Banking System\u0026#34;, \u0026#34;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026#34;) System_Boundary(b2, \u0026#34;BankBoundary2\u0026#34;) { System(SystemA, \u0026#34;Banking System A\u0026#34;) System(SystemB, \u0026#34;Banking System B\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) } System_Ext(SystemC, \u0026#34;E-mail system\u0026#34;, \u0026#34;The internal Microsoft Exchange e-mail system.\u0026#34;) SystemDb(SystemD, \u0026#34;Banking System D Database\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) Boundary(b3, \u0026#34;BankBoundary3\u0026#34;, \u0026#34;boundary\u0026#34;) { SystemQueue(SystemF, \u0026#34;Banking System F Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) SystemQueue_Ext(SystemG, \u0026#34;Banking System G Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) } } BiRel(customerA, SystemAA, \u0026#34;Uses\u0026#34;) BiRel(SystemAA, SystemE, \u0026#34;Uses\u0026#34;) Rel(SystemAA, SystemC, \u0026#34;Sends e-mails\u0026#34;, \u0026#34;SMTP\u0026#34;) Rel(SystemC, customerA, \u0026#34;Sends e-mails to\u0026#34;) C4 diagram 34 lines \\```mermaid C4Context title System Context diagram for Internet Banking System Person(customerA, \u0026#34;Banking Customer A\u0026#34;, \u0026#34;A customer of the bank, with personal bank accounts.\u0026#34;) Person(customerB, \u0026#34;Banking Customer B\u0026#34;) Person_Ext(customerC, \u0026#34;Banking Customer C\u0026#34;) System(SystemAA, \u0026#34;Internet Banking System\u0026#34;, \u0026#34;Allows customers to view information about their bank accounts, and make payments.\u0026#34;) Person(customerD, \u0026#34;Banking Customer D\u0026#34;, \u0026#34;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026#34;) Enterprise_Boundary(b1, \u0026#34;BankBoundary\u0026#34;) { SystemDb_Ext(SystemE, \u0026#34;Mainframe Banking System\u0026#34;, \u0026#34;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026#34;) System_Boundary(b2, \u0026#34;BankBoundary2\u0026#34;) { System(SystemA, \u0026#34;Banking System A\u0026#34;) System(SystemB, \u0026#34;Banking System B\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) } System_Ext(SystemC, \u0026#34;E-mail system\u0026#34;, \u0026#34;The internal Microsoft Exchange e-mail system.\u0026#34;) SystemDb(SystemD, \u0026#34;Banking System D Database\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) Boundary(b3, \u0026#34;BankBoundary3\u0026#34;, \u0026#34;boundary\u0026#34;) { SystemQueue(SystemF, \u0026#34;Banking System F Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) SystemQueue_Ext(SystemG, \u0026#34;Banking System G Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) } } BiRel(customerA, SystemAA, \u0026#34;Uses\u0026#34;) BiRel(SystemAA, SystemE, \u0026#34;Uses\u0026#34;) Rel(SystemAA, SystemC, \u0026#34;Sends e-mails\u0026#34;, \u0026#34;SMTP\u0026#34;) Rel(SystemC, customerA, \u0026#34;Sends e-mails to\u0026#34;) \\``` ","permalink":"https://downmars.github.io/zh/posts/2025_02_28-mermaid_usage/","summary":"\u003ch2 id=\"mermaid\"\u003eMermaid\u003c/h2\u003e\n\u003cp\u003e\u003cblockquote class=\"quote\"\u003e\u003cp\u003eGenerate diagrams from markdown-like text.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cbr\u003e\n\u003ca href=\"https://github.com/mermaid-js/mermaid\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Mermaid\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n是一种基于JavaScript的图标工具，它以Markdown启发的文本定义和渲染器来创建和修改复杂图。对于初学者，有需要的可以参考\u003ca href=\"https://mermaid.js.org/ecosystem/tutorials.html\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   视频教程\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n和\u003ca href=\"https://mermaid.js.org/intro/getting-started.html\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   初学者指南\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n。接下来我将测试一下支持的Mermaid例子。\u003c/p\u003e","title":"Mermaid使用例"},{"content":"前言 ","permalink":"https://downmars.github.io/zh/posts/2025_02_27-read_sam2_1/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e","title":"sam2源码论文阅读_1"},{"content":"前言 在linux环境下面的时候，使用国内的一些网盘是很麻烦的事情，很多盘没有对应的linux客户端，同时在拥有多个网盘账户的用户，管理起来也是十分的麻烦。我一直使用 Alist↗ 作为管理盘工具，其 wiki↗ 能够提供足够的自定义设置以及友好的帮助，这个软件能够很好的满足我的需求。\n统一管理多个网盘账户 支持WebDAV/S3等协议访问 提供统一的文件管理界面 支持超过30种存储服务 本文将会介绍如何部署和使用Alist来管理你的多个网盘账户。\n安装Alist 这边官方提供多种安装方式，包括一键安装、手动安装、Docker、桌面版本、源码安装，我这边展示两种安装方式：\n一键安装 curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; -o v3.sh \u0026amp;\u0026amp; bash v3.sh 默认安装在/opt/alist，如果自定义安装路径，需要将绝对的安装路径path/to/you/alist作为作为bash v3.sh的参数添加在后面。\nAUR安装 由于我使用的是Archlinux，所以AUR库中有人上传了对应的包，看了下更新时间，应该是随着Github同步更新的。\nyay -S alist 上述两种方法可以使用命令alist进行Alist的功能管理。\n获取密码 在Alist的安装路径运行以下命令：\n# 运行程序 ./alist server # 随机生成一个密码 ./alist admin random # 手动设置一个密码 `NEW_PASSWORD`是指你需要设置的密码 ./alist admin set NEW_PASSWORD 获取密码之后，我们就可以使用默认用户名admin和设定的密码在 http://localhost:5244↗ 进行登录。\n主页配置 访问 http://localhost:5244↗ 进入管理界面，在存储菜单中添加你的网盘账户：\n点击\u0026quot;添加存储\u0026quot; 选择对应的网盘服务商（如阿里云盘、Google Drive等） 填写必要的认证信息（通常需要获取API token或OAuth授权） 设置挂载路径和存储策略 我这边以百度网盘为例：\n驱动： 百度网盘 挂载路径： /01_百度网盘 WebDAV策略： 使用代理地址 刷新令牌： xxxx 客户端ID： yyyy 客户端密钥： zzzz 此处，刷新令牌可以从此处获取： Baidu Refresh Token Callback↗ 。需要在打开链接之前使用网页端打开百度网盘，这样网站能够获取你的百度网盘的token。我们只需要将刷新出来的refresh_token:复制到我们配置中的刷新令牌位置即可获取到用户端ID和用户端密钥。\n之后，我们在主页即可查看到我们配置的网盘：\n百度网盘\n如果需要配置其余网盘，可以参考 官方文档↗ 。\n设置开机自启 由于上述两种安装方式，已经自动配置了Service服务，所以直接使用下述的命令即可使得开机自启等操作。如果未配置开机自启，需要手动配置服务： /usr/lib/systemd/system/alist.service 11 lines [Unit] Description=Alist service After=network.target [Service] Type=simple WorkingDirectory=/path/to/alist ExecStart=/path/to/alist/alist server [Install] WantedBy=multi-user.target 然后执行以下命令进行：\n# 重新加载系统守护进程 $ systemctl daemon-reload # 设置服务开机自启动 $ systemctl enable alist.service # 启动服务 $ systemctl start alist.service # 检查服务状态 $ systemctl status alist.service ","permalink":"https://downmars.github.io/zh/posts/2025_02_23-use_alist_to_manage_your_cloud_drives/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在linux环境下面的时候，使用国内的一些网盘是很麻烦的事情，很多盘没有对应的linux客户端，同时在拥有多个网盘账户的用户，管理起来也是十分的麻烦。我一直使用\u003ca href=\"https://github.com/AlistGo/alist\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Alist\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n作为管理盘工具，其\u003ca href=\"https://alist.nn.ci/zh/\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   wiki\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n能够提供足够的自定义设置以及友好的帮助，这个软件能够很好的满足我的需求。\u003c/p\u003e","title":"使用Alist管理你的网盘"},{"content":"本指南将帮助你在基于 Wayland 的系统（如使用 sway 窗口管理器的 Arch Linux 或 Parabola GNU/Linux-libre）上，配置并使用 grim 和 slurp 进行屏幕截图。配置将支持区域截图与全屏截图，并集成 waybar 显示截图通知。此外，截图将自动复制到剪贴板，方便你快速粘贴到其他应用中。通过快捷键，可以方便地启动截图操作，同时避免与屏幕录制快捷键的冲突。\n安装所需软件 在基于 Arch 的发行版上，使用以下命令安装所需的软件：\nsudo pacman -S grim slurp waybar wl-clipboard jq libnotify grim：Wayland 屏幕截图工具，支持区域截图和全屏截图。 slurp：Wayland 区域选择工具，用于与 grim 结合选择截图区域。 waybar：Wayland 状态栏，用于显示截图通知。 wl-clipboard：Wayland 下的剪贴板工具，提供 wl-copy 和 wl-paste 命令。 jq：命令行 JSON 处理工具，用于解析 waybar 配置。 libnotify：发送桌面通知的工具。 创建统一的截图脚本 为了简化操作，我们将合并区域截图和全屏截图脚本为一个统一的脚本 screenshot.sh。该脚本将根据传递的参数执行不同的截图模式，并自动将截图复制到剪贴板，同时发送桌面通知。为了避免与屏幕录制快捷键的冲突，我们将选择不同的快捷键组合。\n脚本内容 将以下内容保存为 ~/bin/screenshot.sh 并赋予执行权限：\n#!/bin/bash # 屏幕截图脚本：screenshot.sh # 支持区域截图和全屏截图 # 保存截图、复制到剪贴板并发送通知 # 配置截图保存目录 SCREENSHOT_DIR=\u0026#34;$HOME/Pictures/Screenshots\u0026#34; mkdir -p \u0026#34;$SCREENSHOT_DIR\u0026#34; # 生成时间戳 TIMESTAMP=$(date +%Y%m%d_%H%M%S) # 定义截图文件路径 FILE=\u0026#34;$SCREENSHOT_DIR/screenshot_$TIMESTAMP.png\u0026#34; # 判断截图模式 if [ \u0026#34;$1\u0026#34; == \u0026#34;full\u0026#34; ]; then MODE=\u0026#34;全屏截图\u0026#34; # 使用 grim 进行全屏截图 grim \u0026#34;$FILE\u0026#34; else MODE=\u0026#34;区域截图\u0026#34; # 使用 slurp 选择截图区域并使用 grim 进行截图 grim -g \u0026#34;$(slurp)\u0026#34; \u0026#34;$FILE\u0026#34; fi # 检查截图是否成功 if [ $? -eq 0 ]; then # 复制截图到剪贴板 wl-copy \u0026lt; \u0026#34;$FILE\u0026#34; # 发送截图完成通知 notify-send \u0026#34;截图完成\u0026#34; \u0026#34;已保存至: $FILE 并已复制到剪贴板\u0026#34; else notify-send \u0026#34;截图失败\u0026#34; \u0026#34;未能成功捕获屏幕\u0026#34; fi exit 0 赋予执行权限 确保脚本具有执行权限：\nchmod +x ~/bin/screenshot.sh 脚本说明 功能： 区域截图：不传递参数时，使用 slurp 选择截图区域。 全屏截图：传递 full 参数时，直接截取整个屏幕。 截图过程： 使用 grim 进行截图。 使用 wl-copy 将截图复制到剪贴板。 使用 notify-send 发送桌面通知，显示截图保存路径和状态。 保存路径： 截图将保存至 ~/Pictures/Screenshots/ 目录，文件名格式为 screenshot_YYYYMMDD_HHMMSS.png。 配置 waybar 由于截图完成后通过 notify-send 发送桌面通知，因此不需要在 waybar 上额外显示截图通知。然而，如果你希望在 waybar 上显示截图缩略图或其他相关信息，可以创建一个自定义模块。以下示例仅保留空白输出，因为主要通知由 notify-send 处理。\n创建自定义模块脚本（可选） 创建 screenshot_notification.sh 脚本，用于检测截图是否完成并显示通知。\n将以下内容保存为 ~/.config/waybar/screenshot_notification.sh 并赋予执行权限：\n#!/bin/bash # 截图通知脚本：screenshot_notification.sh # 当前示例不在 waybar 上显示任何内容 # 如果需要显示更多信息，可以在此处扩展 echo \u0026#34;{\\\u0026#34;text\\\u0026#34;: \\\u0026#34;\\\u0026#34;, \\\u0026#34;class\\\u0026#34;: \\\u0026#34;\\\u0026#34;}\u0026#34; 赋予执行权限 chmod +x ~/.config/waybar/screenshot_notification.sh 更新 waybar 配置 编辑 ~/.config/waybar/config，添加自定义模块 screenshot_notification。假设你希望将其添加到 modules-right 部分。\n{ \u0026#34;layer\u0026#34;: \u0026#34;top\u0026#34;, \u0026#34;position\u0026#34;: \u0026#34;top\u0026#34;, \u0026#34;modules-right\u0026#34;: [ \u0026#34;screenshot_notification\u0026#34;, /* 其他模块 */ ], \u0026#34;custom/screenshot_notification\u0026#34;: { \u0026#34;exec\u0026#34;: \u0026#34;~/.config/waybar/screenshot_notification.sh\u0026#34;, \u0026#34;interval\u0026#34;: 60, \u0026#34;return-type\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;{}\u0026#34;, \u0026#34;max-length\u0026#34;: 100 }, /* 其他配置 */ } 配置 waybar 样式（可选） 编辑 ~/.config/waybar/style.css，为截图通知模块添加样式（当前示例不需要特定样式，因为通知由 notify-send 处理）。\n/* 示例：为截图标识添加样式 */ #screenshot_notification { /* 可根据需要自定义样式 */ } 重新加载 waybar 保存配置后，重新加载 waybar 以应用更改：\npkill waybar waybar \u0026amp; 注意：由于截图通知通过 notify-send 直接发送到桌面环境的通知系统，因此 waybar 中的 screenshot_notification 模块当前未执行任何功能。你可以根据需求扩展该模块，例如显示最近的截图缩略图或其他相关信息。\n配置 sway 快捷键 为了避免与屏幕录制快捷键冲突，我们将为截图功能选择不同的快捷键组合。以下是推荐的快捷键：\n区域截图：$mod+Ctrl+Shift+A 全屏截图：$mod+Ctrl+Shift+F 编辑 sway 配置文件 打开 sway 配置文件，通常位于 ~/.config/sway/config：\nnano ~/.config/sway/config 添加快捷键绑定 在配置文件中添加以下内容：\n# 区域截图 bindsym $mod+Ctrl+Shift+A exec ~/bin/screenshot.sh # 全屏截图 bindsym $mod+Ctrl+Shift+F exec ~/bin/screenshot.sh full 说明：\n区域截图：按下 $mod+Ctrl+Shift+A 启动区域截图。 全屏截图：按下 $mod+Ctrl+Shift+F 启动全屏截图。 重新加载 sway 配置 保存配置文件后，重新加载 sway 配置：\nswaymsg reload 使用方法 区域截图 按下快捷键：按下 $mod+Ctrl+Shift+A。 选择截图区域： 鼠标将变为十字形，拖动选择要截图的区域。 松开鼠标按钮后，grim 将自动保存截图。 截图完成： 截图将保存至 ~/Pictures/Screenshots/ 目录，文件名格式为 screenshot_YYYYMMDD_HHMMSS.png。 截图将自动复制到剪贴板。 桌面通知将显示截图完成的信息。 全屏截图 按下快捷键：按下 $mod+Ctrl+Shift+F。 截图开始： grim 将自动截取整个屏幕，并保存截图。 截图完成： 截图将保存至 ~/Pictures/Screenshots/ 目录，文件名格式为 screenshot_YYYYMMDD_HHMMSS.png。 截图将自动复制到剪贴板。 桌面通知将显示截图完成的信息。 粘贴截图 截图已复制到剪贴板，你可以在任何支持粘贴图像的应用中（如聊天工具、文档编辑器等）直接使用 Ctrl+V 或右键粘贴来插入截图。\n管理截图文件 截图文件可能会逐渐占用大量存储空间。以下是一些管理截图文件的方法：\n自动整理截图文件 可以使用脚本或定时任务（如 cron 或 systemd 服务）来定期整理截图文件。例如，将旧的截图移动到备份目录或删除超过一定天数的截图。\n示例：使用 cron 每周清理 30 天前的截图 打开 crontab 编辑器：\ncrontab -e 添加以下行：\n0 3 * * 0 mkdir -p ~/Pictures/Screenshots/Backup \u0026amp;\u0026amp; find ~/Pictures/Screenshots -type f -name \u0026#34;*.png\u0026#34; -mtime +30 -exec mv {} ~/Pictures/Screenshots/Backup/ \\; 说明：\n每周日凌晨 3 点执行。 创建 Backup 目录（如果不存在）。 将 30 天前的 .png 文件移动到 Backup 目录。 手动备份 将截图文件手动复制到外部存储设备或云存储服务，以释放本地存储空间。\n常见问题与解决方法 截图无保存或文件为空 原因：grim 或 slurp 未正确执行，可能由于权限问题或选择区域失败。\n解决方法：\n确保脚本具有执行权限：\nchmod +x ~/bin/screenshot.sh 运行脚本时检查是否有错误输出：\n~/bin/screenshot.sh ~/bin/screenshot.sh full 确保 slurp 能正常选择区域：\nslurp 如果 slurp 无法选择区域，检查 Wayland 会话权限或重新安装 slurp。\n截图保存路径错误 原因：脚本中配置的截图保存目录不存在或路径错误。\n解决方法：\n确保截图保存目录存在：\nmkdir -p ~/Pictures/Screenshots 检查脚本中的 SCREENSHOT_DIR 变量是否正确设置。\n截图已复制到剪贴板但无法粘贴 原因：wl-copy 未正确执行或剪贴板工具未运行。\n解决方法：\n确保 wl-clipboard 已正确安装：\nsudo pacman -S wl-clipboard 测试 wl-copy 是否正常工作：\necho \u0026#34;Test\u0026#34; | wl-copy wl-paste 如果输出为 Test，则 wl-copy 正常工作。\n确保在 Wayland 会话中运行剪贴板工具。如果使用其他剪贴板管理器，确保它们与 wl-copy 兼容。\n桌面通知未显示 原因：notify-send 未正确安装或通知系统未配置。\n解决方法：\n确保 libnotify 已安装：\nsudo pacman -S libnotify 测试 notify-send 是否正常工作：\nnotify-send \u0026#34;测试通知\u0026#34; \u0026#34;如果你能看到这条消息，notify-send 正常工作。\u0026#34; 检查通知守护进程是否在运行（如 mako、dunst 等）。\n快捷键无响应 原因：sway 快捷键配置错误或脚本路径不正确。\n解决方法：\n确保快捷键绑定正确指向脚本：\nbindsym $mod+Ctrl+Shift+A exec ~/bin/screenshot.sh bindsym $mod+Ctrl+Shift+F exec ~/bin/screenshot.sh full 确保脚本路径正确，并且脚本具有执行权限。\n重新加载 sway 配置：\nswaymsg reload slurp 选择区域失败 原因：Wayland 会话权限不足或 slurp 安装不正确。\n解决方法：\n确保 slurp 已正确安装：\nsudo pacman -S slurp 确保当前用户有权限访问 Wayland 会话。\n尝试单独运行 slurp：\nslurp 脚本执行错误 原因：脚本中存在语法错误或变量未正确引用。\n解决方法：\n检查脚本是否正确复制，没有遗漏或多余的字符。 确保使用的是正确的 shell（#!/bin/bash）。 查看脚本执行时的错误输出，进行调试。 参考资源 grim GitHub 仓库↗ slurp GitHub 仓库↗ sway 窗口管理器文档↗ waybar GitHub 仓库↗ wl-clipboard GitHub 仓库↗ libnotify 官方文档↗ Arch Linux wiki: Screenshot↗ 小结 通过本指南，你已成功配置了 grim 和 slurp 以在 Wayland 环境下进行高效的屏幕截图。结合 waybar 的截图通知显示、快捷键的启动与停止功能，以及自动复制到剪贴板的设置，截图过程变得更加便捷与直观。选择不同的快捷键组合，避免了与屏幕录制快捷键的冲突。根据个人需求，可以进一步优化截图参数，提升截图体验和图像质量。\n如果在配置过程中遇到任何问题或有进一步的优化需求，欢迎参考相关工具的官方文档或寻求社区支持。\n","permalink":"https://downmars.github.io/zh/posts/2025_02_21-shot_with_grim_and_slurp/","summary":"\u003cp\u003e本指南将帮助你在基于 Wayland 的系统（如使用 \u003ccode\u003esway\u003c/code\u003e 窗口管理器的 Arch Linux 或 Parabola GNU/Linux-libre）上，配置并使用 \u003ccode\u003egrim\u003c/code\u003e 和 \u003ccode\u003eslurp\u003c/code\u003e 进行屏幕截图。配置将支持区域截图与全屏截图，并集成 \u003ccode\u003ewaybar\u003c/code\u003e 显示截图通知。此外，截图将自动复制到剪贴板，方便你快速粘贴到其他应用中。通过快捷键，可以方便地启动截图操作，同时避免与屏幕录制快捷键的冲突。\u003c/p\u003e","title":"使用grim和slurp在Wayland环境下进行屏幕截图"},{"content":"本指南将帮助你在基于 Wayland 的系统（如使用 sway 窗口管理器的 Arch Linux 或 Parabola GNU/Linux-libre）上，配置并使用 wf-recorder 和 slurp 进行屏幕录制。配置将支持区域录制与全屏录制，并包含系统音频与麦克风音频的录制。录制过程中将在 waybar 上显示录制标识和时长，结束录制后将通过通知栏显示录制信息。此外，通过重复按下录制快捷键，可以实现录制的启动与停止。\n安装所需软件 在基于 Arch 的发行版上，使用以下命令安装 wf-recorder、slurp、ffmpeg、waybar 以及其他必要工具：\nsudo pacman -S wf-recorder slurp ffmpeg waybar jq libnotify wf-recorder：Wayland 屏幕录制工具。 slurp：Wayland 区域选择工具。 ffmpeg：多媒体处理工具，用于录制音频和合并视频音频。 waybar：Wayland 状态栏，用于显示录制状态。 jq：命令行 JSON 处理工具，用于解析 waybar 配置。 libnotify：发送桌面通知的工具。 创建录制脚本 创建一个统一的录制脚本 record_toggle.sh，用于启动和停止录制。此脚本将处理区域录制与全屏录制，录制系统音频与麦克风音频，并与 waybar 和通知集成。\n脚本内容 将以下内容保存为 ~/bin/record_toggle.sh 并赋予执行权限：\n#!/bin/bash # 录制脚本：record_toggle.sh # 支持启动和停止录制 # 录制模式：区域录制或全屏录制 # 录制系统音频与麦克风音频 # 集成 waybar 标识和录制时长显示，结束后发送通知 # 配置 RECORD_DIR=\u0026#34;$HOME/Videos\u0026#34; mkdir -p \u0026#34;$RECORD_DIR\u0026#34; # 状态文件路径 RECORDING_FLAG=\u0026#34;/tmp/recording_flag\u0026#34; STATUS_FILE=\u0026#34;/tmp/recording_status\u0026#34; STOP_FLAG=\u0026#34;/tmp/stop_recording_flag\u0026#34; # 检查是否正在录制 if [ -f \u0026#34;$RECORDING_FLAG\u0026#34; ]; then # 正在录制，执行停止录制 echo \u0026#34;停止录制中...\u0026#34; # 发送停止标识 touch \u0026#34;$STOP_FLAG\u0026#34; exit 0 else # 未录制，执行启动录制 # 检查是否传递了录制模式参数 if [ \u0026#34;$1\u0026#34; == \u0026#34;full\u0026#34; ]; then RECORD_GEOMETRY=\u0026#34;\u0026#34; MODE=\u0026#34;全屏录制\u0026#34; else RECORD_GEOMETRY=\u0026#34;-g \\\u0026#34;$(slurp)\\\u0026#34;\u0026#34; MODE=\u0026#34;区域录制\u0026#34; fi # 生成时间戳 TIMESTAMP=$(date +%Y%m%d_%H%M%S) # 定义文件路径 VIDEO_FILE=\u0026#34;$RECORD_DIR/recording_$TIMESTAMP.mp4\u0026#34; AUDIO_FILE=\u0026#34;$RECORD_DIR/recording_$TIMESTAMP-audio.wav\u0026#34; FINAL_FILE=\u0026#34;$RECORD_DIR/recording_$TIMESTAMP-final.mp4\u0026#34; # 创建录制标识 echo \u0026#34;$MODE\u0026#34; \u0026gt; \u0026#34;$RECORDING_FLAG\u0026#34; # 启动系统音频录制（默认音频设备） ffmpeg -f pulse -i default -c:a pcm_s16le \u0026#34;$AUDIO_FILE\u0026#34; \u0026amp; FFMPEG_PID=$! # 启动视频录制 if [ -z \u0026#34;$RECORD_GEOMETRY\u0026#34; ]; then wf-recorder -f \u0026#34;$VIDEO_FILE\u0026#34; \u0026amp; else wf-recorder -g \u0026#34;$(slurp)\u0026#34; -f \u0026#34;$VIDEO_FILE\u0026#34; \u0026amp; fi WF_PID=$! # 启动计时器，记录录制时长 SECONDS=0 while kill -0 $WF_PID 2\u0026gt;/dev/null; do sleep 1 SECONDS=$((SECONDS + 1)) # 更新状态文件以供 waybar 显示 echo \u0026#34;$SECONDS\u0026#34; \u0026gt; \u0026#34;$STATUS_FILE\u0026#34; # 检查是否存在停止标识文件 if [ -f \u0026#34;$STOP_FLAG\u0026#34; ]; then echo \u0026#34;停止录制标识已检测到。\u0026#34; kill $WF_PID kill $FFMPEG_PID rm \u0026#34;$STOP_FLAG\u0026#34; break fi done \u0026amp; TIMER_PID=$! # 等待录制进程结束 wait $WF_PID kill $FFMPEG_PID 2\u0026gt;/dev/null kill $TIMER_PID 2\u0026gt;/dev/null # 合并视频和音频 ffmpeg -i \u0026#34;$VIDEO_FILE\u0026#34; -i \u0026#34;$AUDIO_FILE\u0026#34; -c:v copy -c:a aac \u0026#34;$FINAL_FILE\u0026#34; # 清理临时文件 rm \u0026#34;$VIDEO_FILE\u0026#34; \u0026#34;$AUDIO_FILE\u0026#34; rm \u0026#34;$RECORDING_FLAG\u0026#34; rm \u0026#34;$STATUS_FILE\u0026#34; # 发送录制结束通知 DURATION=$(printf \u0026#39;%02d:%02d:%02d\u0026#39; $((SECONDS / 3600)) $(( (SECONDS % 3600) / 60 )) $((SECONDS % 60))) notify-send \u0026#34;录制结束\u0026#34; \u0026#34;保存至: $FINAL_FILE\\n时长: $DURATION\u0026#34; exit 0 fi 赋予执行权限 chmod +x ~/bin/record_toggle.sh 脚本说明 启动录制： 区域录制：不传递参数，使用 slurp 选择录制区域。 全屏录制：传递 full 参数，不使用 slurp，直接录制全屏。 停止录制： 脚本检测到录制标识文件 recording_flag 后，通过创建 stop_recording_flag 文件通知录制进程停止。 录制过程： 使用 wf-recorder 录制视频。 使用 ffmpeg 录制音频（系统音频与麦克风）。 计时器记录录制时长，并更新 status_file 供 waybar 显示。 结束录制： 合并视频和音频文件。 清理临时文件。 发送录制结束通知。 配置 waybar 在 waybar 上显示录制状态和时长，需要创建一个自定义模块。\n创建自定义模块脚本 创建 recording.sh 脚本，用于检测录制状态并输出 JSON 格式的数据供 waybar 使用。\n将以下内容保存为 ~/.config/waybar/recording.sh 并赋予执行权限：\n#!/bin/bash STATUS_FILE=\u0026#34;/tmp/recording_status\u0026#34; RECORDING_FLAG=\u0026#34;/tmp/recording_flag\u0026#34; if [ -f \u0026#34;$RECORDING_FLAG\u0026#34; ]; then if [ -f \u0026#34;$STATUS_FILE\u0026#34; ]; then SECONDS=$(cat \u0026#34;$STATUS_FILE\u0026#34;) SECONDS=$((SECONDS / 2)) # i donot know why time is two than true. HOURS=$((SECONDS / 3600)) MINUTES=$(( (SECONDS % 3600) / 60 )) SECS=$((SECONDS % 60)) TIME_FORMAT=$(printf \u0026#34;%02d:%02d:%02d\u0026#34; $HOURS $MINUTES $SECS) else TIME_FORMAT=\u0026#34;00:00:00\u0026#34; fi MODE=$(cat \u0026#34;$RECORDING_FLAG\u0026#34;) if [ \u0026#34;$MODE\u0026#34; == \u0026#34;全屏录制\u0026#34; ]; then MODE_ICON=\u0026#34;\u0026#34; # 全屏录制图标 else MODE_ICON=\u0026#34;\u0026#34; # 区域录制图标 fi echo \u0026#34;{\\\u0026#34;text\\\u0026#34;: \\\u0026#34;$MODE_ICON Recording $TIME_FORMAT\\\u0026#34;, \\\u0026#34;class\\\u0026#34;: \\\u0026#34;recording\\\u0026#34;}\u0026#34; else echo \u0026#34;{\\\u0026#34;text\\\u0026#34;: \\\u0026#34;\\\u0026#34;, \\\u0026#34;class\\\u0026#34;: \\\u0026#34;\\\u0026#34;}\u0026#34; fi 赋予执行权限 chmod +x ~/.config/waybar/recording.sh 更新 waybar 配置 编辑 ~/.config/waybar/config，添加自定义模块 recording：\n{ \u0026#34;layer\u0026#34;: \u0026#34;top\u0026#34;, \u0026#34;position\u0026#34;: \u0026#34;top\u0026#34;, \u0026#34;modules-left\u0026#34;: [\u0026#34;recording\u0026#34;, /* 其他模块 */], \u0026#34;custom/recording\u0026#34;: { \u0026#34;exec\u0026#34;: \u0026#34;~/.config/waybar/recording.sh\u0026#34;, \u0026#34;interval\u0026#34;: 1, \u0026#34;return-type\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;{}\u0026#34;, \u0026#34;max-length\u0026#34;: 100 }, /* 其他配置 */ } 配置 waybar 样式 编辑 ~/.config/waybar/style.css，为录制模块添加样式：\n#recording { color: #FF0000; /* 红色表示录制中 */ background-color: rgba(0, 0, 0, 0.5); padding: 2px 6px; border-radius: 4px; font-weight: bold; } 重新加载 waybar 保存配置后，重新加载 waybar 以应用更改：\npkill waybar waybar \u0026amp; 配置 sway 快捷键 配置 sway 快捷键，使录制脚本可以通过按键启动与停止。\n编辑 sway 配置文件 打开 sway 配置文件，通常位于 ~/.config/sway/config：\nnano ~/.config/sway/config 添加快捷键绑定 在配置文件中添加以下内容：\n# 启动/停止区域录制 bindsym $mod+Shift+R exec ~/bin/record_toggle.sh # 启动/停止全屏录制 bindsym $mod+Shift+F exec ~/bin/record_toggle.sh full 说明：\n区域录制：按下 $mod+Shift+R 启动或停止区域录制。 全屏录制：按下 $mod+Shift+F 启动或停止全屏录制。 保存并关闭配置文件后，重新加载 sway 配置：\nswaymsg reload 使用方法 启动录制 区域录制：\n按下快捷键 $mod+Shift+R。 使用鼠标选择要录制的区域（由 slurp 提供）。 录制开始，waybar 上将显示录制标识和时长。 全屏录制：\n按下快捷键 $mod+Shift+F。 录制开始，waybar 上将显示录制标识和时长。 停止录制 再次按下相同的快捷键： 区域录制：按下 $mod+Shift+R 停止录制。 全屏录制：按下 $mod+Shift+F 停止录制。 录制结束后：\nwaybar 上的录制标识将消失。 桌面通知将显示录制文件的保存路径和时长。 管理录制文件 录制的视频文件可能会占用大量存储空间。建议定期清理或备份录制文件。\n自动清理旧录制文件 可以使用 cron 或 systemd 定时任务，定期将旧录制文件移动到备份目录。例如，使用 cron 每周清理 7 天前的录制文件：\n打开 crontab 编辑器：\ncrontab -e 添加以下行：\n0 2 * * 0 mkdir -p ~/Videos/Backup \u0026amp;\u0026amp; find ~/Videos -type f -name \u0026#34;*.mp4\u0026#34; -mtime +7 -exec mv {} ~/Videos/Backup/ \\; 说明：\n每周日凌晨 2 点执行。 创建 Backup 目录（如果不存在）。 将 7 天前的 .mp4 文件移动到 Backup 目录。 手动备份 将录制文件备份到外部存储设备或云存储服务，以释放本地存储空间。\n常见问题与解决方法 录制视频无声音 原因：wf-recorder 默认不录制音频，需使用 ffmpeg 单独录制音频。\n解决方法：\n确保 ffmpeg 正常录制音频，并在录制结束后正确合并视频与音频。 检查 PulseAudio 或 PipeWire 配置，确保音频设备正确。 录制过程中卡顿或性能下降 解决方法：\n优化编码器设置：在脚本中使用更快的编码预设，如 --codec-preset fast。 降低分辨率或帧率：选择较低的录制分辨率或帧率。 关闭不必要的后台应用：释放系统资源，提高录制性能。 录制文件无法播放或损坏 原因：录制过程中意外中断或编码器不兼容。\n解决方法：\n使用 ffmpeg 修复损坏的视频文件：\nffmpeg -i corrupted.mp4 -c copy fixed.mp4 确保录制过程中系统稳定，避免中断录制进程。\n选择区域后录制失败 解决方法：\n确保 slurp 正常工作，尝试单独运行 slurp 测试区域选择。 检查权限问题，确保当前用户有权限访问 Wayland 会话和录制屏幕。 waybar 上不显示录制标识 解决方法：\n确保 recording.sh 脚本具有执行权限。 检查 waybar 配置文件是否正确引用自定义模块。 查看 waybar 日志，排查脚本执行错误。 参考资源 wf-recorder GitHub 仓库↗ slurp GitHub 仓库↗ sway 窗口管理器文档↗ PipeWire 官方文档↗ FFmpeg 官方文档↗ waybar GitHub 仓库↗ notify-send 手册↗ 小结 通过本指南，你已成功配置了 wf-recorder 和 slurp 以在 Wayland 环境下进行高效的屏幕录制。结合 waybar 的录制状态显示和快捷键的启动与停止功能，录制过程变得更加便捷与直观。根据个人需求，可以进一步优化录制参数，提升录制体验和视频质量。\n","permalink":"https://downmars.github.io/zh/posts/2025_02_21-record_with_wf_recoder_and_slurp/","summary":"\u003cp\u003e本指南将帮助你在基于 Wayland 的系统（如使用 sway 窗口管理器的 Arch Linux 或 Parabola GNU/Linux-libre）上，配置并使用 \u003ccode\u003ewf-recorder\u003c/code\u003e 和 \u003ccode\u003eslurp\u003c/code\u003e 进行屏幕录制。配置将支持区域录制与全屏录制，并包含系统音频与麦克风音频的录制。录制过程中将在 \u003ccode\u003ewaybar\u003c/code\u003e 上显示录制标识和时长，结束录制后将通过通知栏显示录制信息。此外，通过重复按下录制快捷键，可以实现录制的启动与停止。\u003c/p\u003e","title":"使用wf-recoder和slurp在Wayland环境下进行高效录制"},{"content":"下载 rclone # 检查 rclone 是否可以通过 Pacman 仓库安装 $ sudo pacman -Ss rclone $ sudo pacman -S rclone 我们在 使用Alist管理你的网盘 配置过Alist服务，要将 Alist 挂载到本地系统，首先需要配置 rclone 远程。 rclone 文档↗ 对此进行了详细说明，或者你可以按照以下命令进行配置：\n# 进入 rclone 配置界面 $ rclone config # 选择新建远程 没有找到远程，创建一个新的？ n) 新建远程 s) 设置配置密码 q) 退出配置 n/s/q\u0026gt; n # 选择 n # 设置远程名称 name\u0026gt; remote 选择要配置的存储类型。 从下面的选项中选择一个，或者手动输入 [snip] XX / WebDAV \\ \u0026#34;webdav\u0026#34; [snip] Storage\u0026gt; webdav # 选择 webdav 作为远程名称 # 设置远程 URL http://your_alist_ip:port/dav 输入 WebDAV 服务器的 URL 从下面的选项中选择一个，或者手动输入 1 / 连接到 example.com \\ \u0026#34;https://example.com\u0026#34; url\u0026gt; http://127.0.0.1:5244/dav # 在此处设置 alist 地址和端口，后面加上 \u0026#34;dav\u0026#34;，这是 Alist 所要求的 # 选择 6 你使用的 WebDAV 网站/服务/软件名称 从下面的选项中选择一个，或者手动输入 1 / Fastmail 文件 \\ (fastmail) 2 / Nextcloud \\ (nextcloud) 3 / Owncloud \\ (owncloud) 4 / Sharepoint Online，微软账户认证 \\ (sharepoint) 5 / Sharepoint 使用 NTLM 认证，通常是自托管或本地部署 \\ (sharepoint-ntlm) 6 / 其他网站/服务或软件 \\ (other) vendor\u0026gt; 6 # 输入远程账户信息 用户名 user\u0026gt; admin # 这是你的 alist 用户 # 输入远程密码 密码。 y) 是的，输入我的密码 g) 生成随机密码 n) 否，留空此密码 y/g/n\u0026gt; y # 输入 y 请输入密码：# 输入密码时不可见 password: 确认密码：# 再次输入密码 password: # 按回车键 Bearer Token 代替用户名/密码（例如 Macaroon） bearer_token\u0026gt; 远程配置 # 选择默认配置 # 远程配置结果： -------------------- [remote] type = webdav url = http://127.0.0.1:5244/dav vendor = Other user = admin pass = *** ENCRYPTED *** -------------------- # 确认配置 y) 是的，确认这个配置 e) 编辑这个远程 d) 删除这个远程 y/e/d\u0026gt; y # 输入 y # 输入 \u0026#34;q\u0026#34; 退出配置 挂载到本地系统 可以使用以下命令检查是否已成功连接，并确认 alist 是否已挂载：\n# 检查 alist 目录 $ rclone lsd alist: # 查看 alist 的文件 $ rclone ls alist: # 将 alist 目录挂载到本地目录 /mnt/Webdev/，此命令为前台命令，运行后会被挂起。 $ rclone mount alist:/ /webdav --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --use-mmap # 检查本地挂载位置 $ df -h # 输出结果类似于： Alist: 1.0P 0 1.0P 0% /mnt/Webdev # 卸载本地挂载 fusermount -qzu /webdav 设置开机自启动 你需要使用 root 权限来运行以下命令：\n# 编辑服务文件 $ vim /usr/lib/systemd/system/rclone.Service /usr/lib/systemd/system/rclone.Service 11 lines # /usr/lib/systemd/system/rclone.service 文件内容： [Unit] Description=rclone Before=network.service [Service] User=root ExecStart=/usr/bin/rclone mount alist: /mnt/Webdev/ --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --use-mmap [Install] WantedBy=multi-user.target # 重新加载系统守护进程 $ systemctl daemon-reload # 设置服务开机自启动 $ systemctl enable rclone.service # 启动服务 $ systemctl start rclone.service # 检查服务状态 $ systemctl status rclone.service 部分参考 https://willxup.top/archives/deploy-alist-and-rclone↗ ","permalink":"https://downmars.github.io/zh/posts/2025_02_21-rclone_mount_alist/","summary":"\u003ch2 id=\"下载-rclone\"\u003e下载 rclone\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e# 检查 rclone 是否可以通过 Pacman 仓库安装  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo pacman -Ss rclone  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo pacman -S rclone  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们在\u003ca href=\"../2025_02_23-use_alist_to_manage_your_cloud_drives\"\n   \n   \n   class=\"custom-link\"\u003e  \n   使用Alist管理你的网盘\u003c/a\u003e\n配置过Alist服务，要将 Alist 挂载到本地系统，首先需要配置 \u003cstrong\u003erclone 远程\u003c/strong\u003e。\u003ca href=\"https://rclone.org/webdav/\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   rclone 文档\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n 对此进行了详细说明，或者你可以按照以下命令进行配置：\u003c/p\u003e","title":"使用Rclone挂载Alist网盘"},{"content":"前言 人在国内，安装完系统之后第一件事往往是配置一个魔法，这里参考了 Arch Linux Clash 安装配置记录|清絮的博客↗ 。\n下载 Clash # 如果你使用 Arch Linux，请使用以下命令安装 Clash。 $ sudo pacman -S clash 如果你使用其他 Linux 系统，可以从 Clash↗ 下载。\n# 将 Clash 复制到 /usr/local/bin 目录。 $ sudo cp clash /usr/local/bin/ # 授予 Clash 可执行权限。 $ sudo chmod +x /usr/local/bin/clash 配置 Clash # 创建默认的 YAML 配置文件 $ clash 启动 Clash 后，它会在 ~/.config/clash 目录下生成一个默认配置文件。~/.config/clash/config.yaml 指的是你为 Clash 配置文件指定的目录，该目录存储你的节点和规则。你可以直接将此文件替换为你自己的配置文件。\n修改配置文件后，只需重启 Clash 即可启用代理。\n设置系统代理 # 编辑 /etc/environment 文件 $ sudo vim /etc/environment /etc/environment 4 lines # 添加网络代理设置 http_proxy=127.0.0.1:7890 https_proxy=127.0.0.1:7890 socks_proxy=127.0.0.1:7891 设置开机自启动 # 查看 Clash 的绝对路径 $ which clash 对于 Arch Linux，默认路径为 /usr/bin/clash。\n# 创建一个文件夹来存储与 Clash 相关的文件 $ sudo mkdir -p /etc/clash # 复制相关文件 $ sudo cp ~/.config/clash/config.yaml /etc/clash/ $ sudo cp ~/.config/clash/Country.mmdb /etc/clash/ # 编辑 /etc/systemd/system/clash.service 文件 $ sudo vim /etc/systemd/system/clash.service /usr/lib/systemd/system/clash.service 12 lines # /usr/lib/systemd/system/clash.service 文件内容如下： [Unit] Description=Clash 守护进程，一个基于规则的 Go 语言代理。 After=network.target [Service] Type=simple Restart=always ExecStart=/usr/bin/clash -d /etc/clash # 修改为你的实际路径 [Install] WantedBy=multi-user.target # 重新加载系统守护进程 $ systemctl daemon-reload # 设置服务开机自启动 $ systemctl enable clash.service # 启动服务 $ systemctl start clash.service # 检查服务状态 $ systemctl status clash.service ","permalink":"https://downmars.github.io/zh/posts/2025_02_21-clash_magic/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e人在国内，安装完系统之后第一件事往往是配置一个魔法，这里参考了\u003ca href=\"https://blog.linioi.com/posts/clash-on-arch/\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Arch Linux Clash 安装配置记录|清絮的博客\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n。\u003c/p\u003e\n\u003ch2 id=\"下载-clash\"\u003e下载 Clash\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e# 如果你使用 Arch Linux，请使用以下命令安装 Clash。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo pacman -S clash  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果你使用其他 Linux 系统，可以从 \u003ca href=\"https://github.com/DustinWin/clash_singbox-tools/releases/tag/Clash-Premium\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Clash\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n 下载。\u003c/p\u003e","title":"Clash魔法配置"},{"content":"如何使用ollama-这是一个系列\n通过Ollama调用DeepSeek 通过公网IP调用暴露的Ollama服务 \u0026#x1f448; 你在这里 Warning 使用这种方法时，请务必尊重服务器的隐私和使用政策，避免滥用公共资源。 随着 DeepSeek 模型的广泛应用，越来越多的人开始在自己的服务器上运行 Ollama 平台来本地执行模型。由于 Ollama 在默认配置下不需要 API 密钥，只需要知道服务器的 IP 地址和端口，就能连接并访问正在运行的模型。因此，如果你能够找到这些暴露在公网的 Ollama 实例，就能免费使用它们。\n本文将介绍如何利用公网 IP 精准访问 Ollama 服务器，并使用其中的 AI 模型。\n原理概述 Ollama 是一个支持本地运行 AI 模型的平台，在默认配置下，Ollama 不需要身份验证或 API 密钥，只要知道服务器的 IP 地址和端口，就能直接连接并访问其运行的模型。随着 DeepSeek 模型的火爆，许多服务器开始运行 Ollama 来执行这些模型。\n通过简单的 GET 请求，你可以查看服务器上正在运行的模型，确认它们是否符合你的需求。这就使得你能够在没有任何授权的情况下，利用开放的服务器资源，进行“白嫖”。\n实施步骤 使用 Fofa 查找 Ollama 实例 首先，你需要通过搜索引擎如 Fofa 来查找暴露了 Ollama 服务的公网 IP 地址。你可以使用以下搜索语句：\napp=\u0026#34;Ollama\u0026#34; \u0026amp;\u0026amp; is_domain=false 这个查询帮助你定位那些运行在端口 11434 上的 Ollama 实例。这些实例通常没有做过多的访问限制，只要你知道地址，就能连接到它们。\n导出并验证可用的服务 找到目标服务器后，你可以导出相关数据，并使用批量访问脚本进行验证。你可以自己编写脚本，也可以使用 Burp Suite 等工具进行暴力破解，检查哪些服务器开放了能够使用的接口。\n查看正在运行的模型 一旦成功连接到服务器，你可以通过发送 GET 请求来查看服务器上运行的模型。具体地址为：\nURL:/api/ps 该接口会返回服务器当前运行的所有模型的信息。如果你看到 DeepSeek 模型的名称，并且标明了参数数量（如 70B、32B），那么说明这个模型可以访问。\n选择合适的 AI 软件进行交互 确认服务器上运行的模型后，你可以选择适合的 AI 软件来调用 Ollama 提供的 API，与模型进行交互。例如，70B 版本的模型适合处理大规模的计算任务，而 32B 版本则适合轻量级应用。\n测试和验证模型的可用性 通过多次测试，你可以发现哪些模型可用，哪些模型由于服务器限制或负载过高可能无法访问。一般来说，70B 和 32B 是最常见的有效模型，而如 671B 等大规模模型较为罕见。\n总结 通过这一方法，你可以在没有 API 密钥的情况下，精准地连接到正在运行 Ollama 的服务器，并使用其中的 DeepSeek 模型。只要知道目标服务器的地址和端口，你就能通过简单的 GET 请求，查看并使用这些开放的 AI 模型。这种方法被称为“精准白嫖”，它依赖于大规模使用 Ollama 的服务器的暴露服务。\n","permalink":"https://downmars.github.io/zh/posts/2025_02_21-using_public_ip_to_freely_access_ollama/","summary":"\u003cblockquote class=\"quote\"\u003e\u003cp\u003e如何使用ollama-这是一个系列\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../2025_02_09-ollama_deepseek_1\"\n   \n   \n   class=\"custom-link\"\u003e  \n   通过Ollama调用DeepSeek\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\".\"\n   \n   \n   class=\"custom-link\"\u003e  \n   通过公网IP调用暴露的Ollama服务\u003c/a\u003e\n\u0026#x1f448; 你在这里\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\n\u003cdiv class=\"admonition warning \"\u003e\n  \u003cdiv class=\"admonition-header\"\u003e\n    \u003ci class=\"fas fa-exclamation-triangle\"\u003e\u003c/i\u003e\n    \u003cspan\u003eWarning\u003c/span\u003e\n    \n  \u003c/div\u003e\n  \u003cdiv class=\"admonition-content\"\u003e\n    使用这种方法时，请务必尊重服务器的隐私和使用政策，避免滥用公共资源。\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e随着 DeepSeek 模型的广泛应用，越来越多的人开始在自己的服务器上运行 Ollama 平台来本地执行模型。由于 Ollama 在默认配置下不需要 API 密钥，只需要知道服务器的 IP 地址和端口，就能连接并访问正在运行的模型。因此，如果你能够找到这些暴露在公网的 Ollama 实例，就能免费使用它们。\u003c/p\u003e","title":"通过公网IP调用暴露的Ollama服务"},{"content":"前言 这段时间看见了一个CLI工具 gtrash↗ ，它能够将文件移动到系统的垃圾箱之中，从而能够轻松恢复重要的文件，之前使用rm有惨痛的教训如果有已经使用rm删除文件的可以看一下 Linux下用rm误删除文件的三种恢复方法↗ ，索性就写一份使用教程。\n安装Gtrash 由于我使用的是Archlinux，我这边使用AUR进行安装：\n$ yay -S gtrash-bin 使用方法 删除文件 使用put指令将文件移动到垃圾箱中，删除目录时默认不需要-r选项。\n$ cd \u0026amp;\u0026amp; mkdir dir \u0026amp;\u0026amp; touch file1 file2 $ gtrash put dir file1 file2 查看垃圾箱摘要 使用 summary 子命令查看垃圾箱的信息，包括项目数量和总大小。\n$ gtrash summary [/home/user/.local/share/Trash] item: 3 size: 4.1 kB 查找垃圾箱中的文件 使用 find 子命令列出垃圾箱中的文件。 Path 字段显示文件的原始路径，而不是垃圾箱中的路径。\n$ gtrash find Date Path 2024-01-01 00:00:00 /home/user/dir 2024-01-01 00:00:00 /home/user/file1 2024-01-01 00:00:00 /home/user/file2 可以通过命令行参数传递字符串查询，使用正则表达式搜索文件。\n$ gtrash find file1 dir Date Path 2024-01-01 00:00:00 /home/user/dir 2024-01-01 00:00:00 /home/user/file1 恢复文件 有多种方法可以恢复文件。 使用 restore 子命令以交互式 TUI 恢复文件。\n$ gtrash restore 在 TUI 中，可以选择多个文件进行恢复。 按 ? 查看详细操作说明。 使用 j、k 或方向键导航。 按 l、右箭头键或空格键将文件移动到右侧表格。\n按 Enter 选择文件后，会显示所选文件列表和确认提示。 按 y 确认恢复。\n$ gtrash restore Date Path 2024-01-01 00:00:00 /home/user/dir 2024-01-01 00:00:00 /home/user/file1 Selected 2 trashed files Are you sure you want to restore? yes/no 永久删除文件 使用 find 子命令的 --rm 选项永久删除垃圾箱中的文件。 此操作不可逆，类似于 rm，文件无法恢复。\n# 删除特定文件 $ gtrash find file1 --rm # 删除所有文件 $ gtrash find --rm 工作原理 gtrash 遵循 FreeDesktop.org 规范。\n它的主要功能类似于 mv，但通过记录元信息并自动将文件移动到外部文件系统的垃圾箱来扩展功能。\n文件在主文件系统中被移动到以下路径：\n# 标准路径 $HOME/.local/share/Trash # 如果设置了 $XDG_DATA_HOME $XDG_DATA_HOME/Trash 文件被移动到 files 目录，而元数据存储在 info 目录中。\n$ gtrash put file1 # 记录元信息 $ cat ~/.local/share/Trash/info/file1.trashinfo [Trash Info] Path=/home/user/file1 DeletionDate=2024-01-01T00:00:00 # 实际文件 $ ls ~/.local/share/Trash/files/file1 /home/user/.local/share/Trash/files/file1 常见问题 gtrash 和 rm 有什么区别？ rm 使用 unlink 系统调用，文件删除后不可恢复。 gtrash 使用 rename 系统调用，文件可以恢复。\n可以设置 rm=gtrash put 的别名吗？ 可以，但不推荐，因为可能会意外执行实际的 rm 命令。\n使用 sudo 运行会怎样？ 文件会被移动到 root 用户的垃圾箱中。\n技巧 Shell 集成 gtrash 支持 bash、zsh、fish 的自动补全。\ngtrash completion bash --help gtrash completion zsh --help gtrash completion fish --help 按大小和日期清理垃圾箱 按日期清理：\n# 删除超过 7 天的文件 $ gtrash prune --day 7 按大小清理：\n# 删除大于 10MB 的文件 $ gtrash find --size-large 10mb --rm # 删除小于 1GB 的文件 $ gtrash prune --size 5GB 配置 某些行为可以通过设置环境变量来调整。 参考 配置文档 。\n相关项目 使用系统垃圾箱 trash-cli↗ trashy↗ trash-d↗ 不使用系统垃圾箱 rip↗ gomi↗ 希望这份指南能帮助你更好地使用 gtrash！如果有任何问题，请参考官方文档或提交 Issue。\n","permalink":"https://downmars.github.io/zh/posts/2025_02_21-gtrash_as_an_alternative_to_rm/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e这段时间看见了一个CLI工具\u003ca href=\"https://github.com/umlx5h/gtrash\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   gtrash\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n，它能够将文件移动到系统的垃圾箱之中，从而能够轻松恢复重要的文件，之前使用rm有惨痛的教训\u003cspan class=\"sidenote-number\"\u003e\u003csmall class=\"sidenote\"\u003e如果有已经使用rm删除文件的可以看一下\u003ca href=\"https://www.cnblogs.com/cs-markdown10086/p/16938664.html\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Linux下用rm误删除文件的三种恢复方法\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\u003c/small\u003e\u003c/span\u003e\n\n，索性就写一份使用教程。\u003c/p\u003e","title":"Gtrash作为rm的代替工具"},{"content":"前言 今天在给别人分享友链的时候，需要给别人一个头像的链接，之前把图片是全部存放到本地的，这下正好分享一下配置图床的过程。\n我这边使用的是 PicGo↗ ，这是一个快速将图片上传到指定的图床上并返回Markdown格式的URL链接的工具。图床我们的首选是免费的，但是现在市面上大部分的都是不可能三角形，要么可控性差，要么收费，要么速度慢。对于写代码的，首选有两个，Gitee和Github。我原先考虑到的国内访问Gitee比较容易，但是在配置完毕之后出现了对应链接无法接收到图像，看网友说应该是禁用了外链请求到Gitee，详情请见 Gitee网站使用条款-仓库大小↗ ，而且国内平台会有审核机制，所以我这边还是选择了Github来搭建我的平台，安全的同时也能够及时备份，避免遗失，不然某天博客的云端图像丢失了就不可挽回了。\n创建Github图床仓库 新建仓库 登录 Github↗ 并点击右上角 → 选择 \u0026ldquo;New repository\u0026rdquo; 填写仓库信息： Repository name: blog-images # 推荐名称 Description: Blog Image Hosting Public/Private: Public ✔️ 点击 \u0026ldquo;Create repository\u0026rdquo; 生成访问令牌 点击右上角头像 → Settings → Developer settings → Personal access tokens → Tokens (classic) 点击 \u0026ldquo;Generate new token\u0026rdquo; → \u0026ldquo;Generate new token (classic)\u0026rdquo; 配置权限： Note: PicGo-upload Expiration: No expiration # 长期有效 Select scopes: ✔️ repo (全部仓库权限) Warning 这个token只会生成后只会显示一次，需要及时复制备份。 配置PicGo 我们在 PicGo仓库↗ 选择需要的版本进行下载和安装，我这边选择的版本是2.4.0。\n配置上传 打开PicGo → 图床设置 → GitHub图床 填写配置： 图床配置名: Github_images_hosting 设定仓库名: yourname/blog-images # 替换为实际用户名/仓库 设定分支名: main 设定Token: 粘贴生成的令牌 存储路径: blog/ # 可选分类目录 自定义域名: # 我这里没有配置CDN加速，所以这里空置即可 此时就可以使用这个工具来上传图片了，下方图片为图床返回链接测试，更多设置请查看 官方文档↗ 。\n安装插件 自动水印 自动压缩 ","permalink":"https://downmars.github.io/zh/posts/2025_02_20-image_hosting_in_github/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e今天在给别人分享友链的时候，需要给别人一个头像的链接，之前把图片是全部存放到本地的，这下正好分享一下配置图床的过程。\u003cbr\u003e\n我这边使用的是\u003ca href=\"https://github.com/Molunerfinn/PicGo\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   PicGo\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n，这是一个快速将图片上传到指定的图床上并返回Markdown格式的URL链接的工具。图床我们的首选是免费的，但是现在市面上大部分的都是不可能三角形，要么可控性差，要么收费，要么速度慢。对于写代码的，首选有两个，Gitee和Github。我原先考虑到的国内访问Gitee比较容易，但是在配置完毕之后出现了对应链接无法接收到图像，看网友说应该是禁用了外链请求到Gitee，详情请见\u003ca href=\"https://gitee.com/terms\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Gitee网站使用条款-仓库大小\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n，而且国内平台会有审核机制，所以我这边还是选择了Github来搭建我的平台，安全的同时也能够及时备份，避免遗失，不然某天博客的云端图像丢失了就不可挽回了。\u003c/p\u003e","title":"通过PicGo在Github上搭建图床"},{"content":"前言 前段时间， avante.nvim↗ 插件支持了 DeepSeek的API↗ 截止2025年2月18日，由于官方服务器资源紧张，暂时停止API的充值服务。 ，这边将配置的全流程记录一下，供大家参考。\navante.nvim avante.nvim是一个 Neovim↗ 的插件，旨在模仿AI开发环境 Cursor↗ 的工作模式。它给用户提供了AI驱动的代码建议，并且能够以花费最小的努力将这些建议直接应用于其源文件。\n由于，我这里使用的是 LazyVim↗ 来管理我的NeoVim插件配置，我们可以很方便的进行我的anate.nvim的安装。\n~/.config/nvim/lua/plugins/avante.lua 129 lines vim.env.ANTHROPIC_API_KEY = \u0026#34;sk-xxxx\u0026#34; vim.env.DEEPSEEK_API_KEY = \u0026#34;sk-xxxx\u0026#34; return { \u0026#34;yetone/avante.nvim\u0026#34;, event = \u0026#34;VeryLazy\u0026#34;, lazy = false, version = false, -- Set this to \u0026#34;*\u0026#34; to always pull the latest release version, or set it to false to update to the latest code changes. opts = { provider = \u0026#34;deepseek_r1\u0026#34;, -- 指定使用 DeepSeek 作为 provider auto_suggestions_provider = \u0026#34;deepseek\u0026#34;, vendors = { deepseek = { __inherited_from = \u0026#34;openai\u0026#34;, disable_tools = true, api_key_name = \u0026#34;DEEPSEEK_API_KEY\u0026#34;, endpoint = \u0026#34;https://api.deepseek.com\u0026#34;, model = \u0026#34;deepseek-coder\u0026#34;, }, deepseek_r1 = { __inherited_from = \u0026#34;openai\u0026#34;, disable_tools = true, api_key_name = \u0026#34;DEEPSEEK_API_KEY\u0026#34;, endpoint = \u0026#34;https://api.deepseek.com\u0026#34;, model = \u0026#34;deepseek-reasoner\u0026#34;, }, behaviour = { auto_suggestions = true, -- Experimental stage auto_set_highlight_group = true, auto_set_keymaps = true, auto_apply_diff_after_generation = true, support_paste_from_clipboard = true, }, mappings = { --- @class AvanteConflictMappings diff = { ours = \u0026#34;co\u0026#34;, theirs = \u0026#34;ct\u0026#34;, all_theirs = \u0026#34;ca\u0026#34;, both = \u0026#34;cb\u0026#34;, cursor = \u0026#34;cc\u0026#34;, next = \u0026#34;]x\u0026#34;, prev = \u0026#34;[x\u0026#34;, }, suggestion = { accept = \u0026#34;\u0026lt;M-l\u0026gt;\u0026#34;, next = \u0026#34;\u0026lt;M-]\u0026gt;\u0026#34;, prev = \u0026#34;\u0026lt;M-[\u0026gt;\u0026#34;, dismiss = \u0026#34;\u0026lt;C-]\u0026gt;\u0026#34;, }, jump = { next = \u0026#34;]]\u0026#34;, prev = \u0026#34;[[\u0026#34;, }, submit = { normal = \u0026#34;\u0026lt;CR\u0026gt;\u0026#34;, insert = \u0026#34;\u0026lt;C-s\u0026gt;\u0026#34;, }, sidebar = { apply_all = \u0026#34;A\u0026#34;, apply_cursor = \u0026#34;a\u0026#34;, switch_windows = \u0026#34;\u0026lt;Tab\u0026gt;\u0026#34;, reverse_switch_windows = \u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34;, }, }, highlights = { ---@type AvanteConflictHighlights diff = { current = \u0026#34;DiffText\u0026#34;, incoming = \u0026#34;DiffAdd\u0026#34;, }, }, --- @class AvanteConflictUserConfig diff = { autojump = true, ---@type string | fun(): any list_opener = \u0026#34;copen\u0026#34;, --- Override the \u0026#39;timeoutlen\u0026#39; setting while hovering over a diff (see :help timeoutlen). --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`. --- Disable by setting to -1. override_timeoutlen = 500, }, suggestion = { debounce = 600, throttle = 600, }, }, -- if you want to build from source then do `make BUILD_FROM_SOURCE=true` build = \u0026#34;make\u0026#34;, -- build = \u0026#34;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false\u0026#34; -- for windows dependencies = { \u0026#34;stevearc/dressing.nvim\u0026#34;, \u0026#34;nvim-lua/plenary.nvim\u0026#34;, \u0026#34;MunifTanjim/nui.nvim\u0026#34;, --- The below dependencies are optional, \u0026#34;echasnovski/mini.pick\u0026#34;, -- for file_selector provider mini.pick \u0026#34;nvim-telescope/telescope.nvim\u0026#34;, -- for file_selector provider telescope \u0026#34;hrsh7th/nvim-cmp\u0026#34;, -- autocompletion for avante commands and mentions \u0026#34;ibhagwan/fzf-lua\u0026#34;, -- for file_selector provider fzf \u0026#34;nvim-tree/nvim-web-devicons\u0026#34;, -- or echasnovski/mini.icons \u0026#34;zbirenbaum/copilot.lua\u0026#34;, -- for providers=\u0026#39;copilot\u0026#39; { -- support for image pasting \u0026#34;HakonHarnes/img-clip.nvim\u0026#34;, event = \u0026#34;VeryLazy\u0026#34;, opts = { -- recommended settings default = { embed_image_as_base64 = false, prompt_for_file_name = false, drag_and_drop = { insert_mode = true, }, -- required for Windows users use_absolute_path = true, }, }, }, { -- Make sure to set this up properly if you have lazy=true \u0026#34;MeanderingProgrammer/render-markdown.nvim\u0026#34;, opts = { file_types = { \u0026#34;markdown\u0026#34;, \u0026#34;Avante\u0026#34; }, }, ft = { \u0026#34;markdown\u0026#34;, \u0026#34;Avante\u0026#34; }, }, }, }, } 在编写完成之后，我们使用:Lazy install yetone/avante.nvim来进行此插件的安装。\n我在这边对于auto_suggestions和chat的providers使用了不同的模型，参考于： avante.nvim#774↗ 和 avante.nvim#1115↗ 。\nWarning 注意，如果要使用auto_suggestions功能，记得调整一下debounce和throttle设置，即防抖和节流，单位为ms。否则，你在写文章的后，你会发现你一天用了373w tokens，不要问我为什么知道的。 获取DeepSeek API Key 注册DeepSeek账户 访问 DeepSeek官网↗ 点击\u0026quot;Sign Up\u0026quot;注册新账户 完成邮箱验证 创建API Key 登录后进入控制台 导航至\u0026quot;API Keys\u0026quot;页面 点击\u0026quot;Create new API Key\u0026quot;按钮 为API Key设置一个描述性名称（如\u0026quot;nvim-avante\u0026quot;） 复制生成的API Key并妥善保存 API Key使用注意事项 API Key仅在创建时显示一次，请务必立即保存 建议将API Key存储在安全的地方（如密码管理器） 每个API Key都有使用限额，请合理使用 如果API Key泄露，请立即删除并创建新的Key 将你创建的DeepSeek API Key填入到上述文件开头的vim.env.DEEPSEEK_API_KEY即可开启你的avante.nvim之旅。\nTip 现在除了DeepSeek官方的API，其余家的都很稳定，打算购买第三方API的访客可以先参考下: 务实测试：DeepSeek 各家 API 真实速度（附：测试脚本）↗ 。 核心操作指南 快捷键映射 avante.nvim 提供了丰富的快捷键操作体系，以下是主要快捷键说明：\n快捷键 模式 功能描述 \u0026lt;leader\u0026gt;aa 普通模式 打开/切换侧边栏 \u0026lt;leader\u0026gt;ar 普通模式 刷新侧边栏内容 \u0026lt;leader\u0026gt;af 普通模式 切换侧边栏焦点 \u0026lt;leader\u0026gt;ae 普通模式 编辑选中代码块 co 差异模式 采用当前版本 ct 差异模式 采用建议版本 ca 差异模式 采用所有建议修改 cb 差异模式 合并双方修改 cc 差异模式 基于光标位置选择 ]] 结果窗口 跳转到下一个代码块 [[ 结果窗口 跳转到上一个代码块 注意事项：\n使用Lazy.nvim时快捷键会自动安全绑定（不与现有快捷键冲突） 可通过配置覆盖默认快捷键： ~/.config/nvim/lua/plugins/avante.lua 8 lines opts = { mappings = { diff = { ours = \u0026#34;\u0026lt;leader\u0026gt;co\u0026#34;, -- 自定义采用当前版本 theirs = \u0026#34;\u0026lt;leader\u0026gt;ct\u0026#34; } } } 核心命令 avante.nvim 提供了一系列强大的命令操作：\n命令 功能描述 使用示例 :AvanteAsk [问题] 向AI提问代码相关问题 :AvanteAsk 如何优化这个循环结构 :AvanteChat 开启代码库对话模式 :AvanteChat position=right :AvanteEdit 编辑选中代码块 配合视觉模式使用 :AvanteRefresh 刷新所有Avante窗口 解决界面卡顿时使用 :AvanteSwitchProvider 切换AI服务提供商 :AvanteSwitchProvider openai :AvanteToggle 开关侧边栏 快速切换工作区布局 高级用法示例：\n带上下文的提问： :AvanteAsk position=float 请解释这个函数的时间复杂度 代码重构工作流： 选中目标代码块 执行:AvanteEdit 使用co/ct快捷键选择修改 按 :w保存变更 笑话一则 avante.nvim#1011↗ :This was my process, and I\u0026rsquo;m sure I\u0026rsquo;m not the only one in this situation.\nI am a software developer People are talking about AI; I have no idea how to use it Friend suggests this plugin Cool, maybe I\u0026#39;ll learn how to use AI at work Add the plugin to my lazy.nvim config, try it out, and it asks for something called ANTHROPIC_API_KEY No idea what that is Google it Oh, looks like I need an account Create an account Find the key and add it to my .bashrc Try the plugin again I get a the response posted above \u0026gt; \u0026#34;make sure you have credit balance\u0026#34; No idea what that is Google it Apparently you have to pay for this ...? Apparently I have $4.90 credit in my account Seems like maybe I got $5 free to start and I\u0026#39;ve used 10¢ of it ...? ","permalink":"https://downmars.github.io/zh/posts/2025_02_18-avante.nvim_with_deepseek_api/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e前段时间，\u003ca href=\"https://github.com/yetone/avante.nvim?tab=readme-ov-file\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   avante.nvim\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n插件支持了\u003ca href=\"https://platform.deepseek.com/usage\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   DeepSeek的API\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n\u003cspan class=\"sidenote-number\"\u003e\u003csmall class=\"sidenote\"\u003e截止2025年2月18日，由于官方服务器资源紧张，暂时停止API的充值服务。\u003c/small\u003e\u003c/span\u003e\n\n，这边将配置的全流程记录一下，供大家参考。\u003c/p\u003e\n\u003ch2 id=\"avantenvim\"\u003eavante.nvim\u003c/h2\u003e\n\u003cp\u003eavante.nvim是一个\u003ca href=\"https://neovim.io/\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Neovim\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n的插件，旨在模仿AI开发环境\u003ca href=\"https://www.cursor.com/\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Cursor\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n的工作模式。它给用户提供了AI驱动的代码建议，并且能够以花费最小的努力将这些建议直接应用于其源文件。\u003c/p\u003e","title":"使用Avante.nvim作为代码助手"},{"content":"前言 这两天给爸妈拍了一些照片准备导出，正好在linux环境下，我于是打算研究一下如何在linux环境下传输相机的一些数据，顺便为相机记录做一个开头。\nMSC or MTP 原本以为尼康相机是通过 MSC↗ (mass storage class)或者 MTP↗ (Media Transfer Protocol)协议传输照片的，但是运行lsblk没有出现设备，应该不是MSC；并且尝试jmtpfs尝试挂载MTP设备，运行jmtpfs ~/camera，并没有文件夹挂载在我自定义的相机文件夹,在我去谷歌搜索之后才大致明白了是怎么回事。\n尼康系列下D700是第一款不再支持MSC的相机Cletus Lee在 D800 is not mounted on imac 10.9↗ 中回答到\u0026quot;The D700 was the first Nikon DSLR that does not offer a Mass Storage mode. The camera will only show up as a MTP device. It has to be set-able as a Mass storage device in a camera setup menu. This is no longer an option for D700, D800 D4 and other more recent ly released Nikons. \u0026quot; ，该相机只能够以MTP协议传输文件，同时以后发布的相机也不再支持在相机中将传输模式设置为MSC。\n接下来我在Nikon官网的一篇文章 What are the MSC and PTP transfer protocols used for in Nikon digital cameras?↗ 找到了更加深入的信息，官方公布了Nikon相机支持的传输协议，虽然更新时间为2016年12月21日，但是明确在表格中表明在D700以后发布(即2008年7月25日)的相机都不再支持MSC了。但是我之前尝试MTP协议来挂载相机到本机的文件夹也失败了，我于是查看相关关键词，也发现了有人遇到了相似的疑惑，有人回答道他认为Nikon Z系列的相机都只支持 PTP↗ (Picture Transfer Protocol)dgaxiola在 Nikon Z doesn\u0026rsquo;t mount as a drive to OS X? ↗ 中回答道\u0026quot;I think Nikon Z cameras only offer USB Picture Transfer Protocol (PTP) for photo access. On my Mac with my Z6, I use the included Image Capture app to transfer photos over USB.\u0026quot; ，并且有另一个人建议题主使用gphoto2来进行照片的传输以及相机的控制Pouet在 Nikon camera does not mount↗ 中回答道\u0026quot;Some Nikon cameras use PTP instead of MSC or MTP protocol for memory access, for PTP you need to install gvfs-gphoto2 package.\u0026quot; 。\nqPhoto2 gPhoto2↗ 是一个免费的、可再分发的数字相机软件套件，专为类 Unix 系统设计，由世界各地一群专门的志愿者开发。它支持超过 2700 款相机和媒体播放器↗ 。\ngPhoto2 运行在多个类 Unix 操作系统上，包括 Linux、FreeBSD、NetBSD、MacOS X 等。主要的 Linux 发行版（如 Debian GNU/Linux、Ubuntu、Gentoo、Fedora、openSUSE、Mandriva 等）都提供了 gPhoto。\n我们使用以下命令下载gPhoto2：\n$ sudo pacman -S gphoto2 gPhoto2提供了很多有趣的功能，这让我们能够通过命令行查看相机(运行前记得开机，不然我的Nikon30是读取不到的)：\n# 显示相机中所有文件夹的列表 $ gphoto2 --list-folders # 显示相机存储中所有文件 $ gphoto2 --list-files # 下载相机中的所有文件 $ gphoto2 --get-all-files # 显示相机配置信息 $ gphoto2 --list-config 由于我的相机中设置了间隔拍摄创建新文件夹，导致多个文件夹同时传输时会出现文件名重复，可以根据文件夹路径和文件名为每个文件生成唯一的名称：\n$ gphoto2 --get-all-files --filename=\u0026#34;%F/%f\u0026#34; 此外，gPhoto2还提供了控制相机的功能：\n# 捕捉单张图片 $ gphoto2 --capture-image # 捕捉视频 $ gphoto2 --capture-movie=SECONDS # 使用长时间曝光（如 --bulb 模式）拍摄 $ gphoto2 --bulb=10 # 使用 --capture-preview 启用相机的实时预览功能 $ gphoto2 --capture-preview # 使用 --show-preview 显示实时预览图像 $ gphoto2 --show-preview # 触发拍照（模拟按下快门按钮） $ gphoto2 --trigger-capture # 修改相机的配置参数，例如 ISO 或曝光时间 $ gphoto2 --set-config=iso=400 更多功能可以参考于 The gPhoto2 Reference (the man pages)↗ 。\n","permalink":"https://downmars.github.io/zh/posts/2025_02_16-how_to_connect_nikon_in_archlinux/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e这两天给爸妈拍了一些照片准备导出，正好在linux环境下，我于是打算研究一下如何在linux环境下传输相机的一些数据，顺便为相机记录做一个开头。\u003c/p\u003e","title":"使用gPhoto2在Archlinux上进行Nikon相机的操控"},{"content":"如何使用ollama-这是一个系列\n通过Ollama调用DeepSeek \u0026#x1f448; 你在这里 通过公网IP调用暴露的Ollama服务 Ollama \u0026ldquo;Get up and running with large language models locally.\u0026rdquo;\n想必大家一定从很多地方都看到过这个一直小羊驼\u0026ndash; Ollama↗ ，正如官方仓库所言，Ollama旨在简化大语言模型(LLMs)的本地部署和使用，我们能够通过这个这个工具来实现轻松下载、运行和管理各种开源的大语言模型。\nOllama支持的模型仓库： https://ollama.com/library↗ 我在这里使用的是 deepseek-r1:14b，因为我的笔记本没有 GPU，但 Ollama 支持在没有 GPU 的情况下调用 CPU 来运行模型，所以也能够正常运行。\n注意：运行 7B 模型至少需要 8GB 内存，运行 14B 模型至少需要 16GB 内存，运行 33B 模型至少需要 32GB 内存。\nDeepSeek \u0026ldquo;DeepSeek’s first-generation reasoning models, achieving performance comparable to OpenAI-o1 across math, code, and reasoning tasks.\u0026rdquo;\nDeepSeek↗ DeepSeek-V3↗ 是其最新的开源模型项目，完整模型为671B， 论文链接↗ （深度求索）是中国人工智能公司深度求索（DeepSeek Inc.）开发的一系列开源大语言模型（LLM），专注于高效推理和低成本部署。其中的DeepSeek-R1是其第一代推理模型，在推理任务上的表现与OpenAI-o1相当，同时为了支持研究社区，DeepSeek开源了DeepSeek-R1以及基于Qwen2.5和Llama3蒸馏出来的共记7个模型。\n安装Ollama $ sudo pacman -S ollama 官方推荐的方式为如下：\n$ curl -fsSL https://ollama.com/install.sh | sh 下拉DeepSeek模型 Ollama现在已经将deepseek模型接入官方库中，我们只需要通过以下命令拉取模型即可：\n$ ollama pull deepseek-r1:14b 通过Ollama启动DeepSeek 经过上述部分，我们已经可以尝试本机运行DeepSeek了。通过以下命令启动Ollama服务：\n$ ollama server 在启动Ollama服务过后，我们即可使用以下命令来尝试DeepSeek了：\n$ ollama run deepseek-r1:14b 运行示例如下：\n\u0026gt;\u0026gt;\u0026gt; which is greater? 9.11 or 9.9 \u0026lt;think\u0026gt; First, I observe that both numbers have the same whole number part, which is 9. Next, I compare their decimal parts: 0.11 and 0.90. Since 0.11 is less than 0.90, it follows that 9.11 is less than 9.9. \u0026lt;/think\u0026gt; To determine which number is greater between **9.11** and **9.9**, let\u0026#39;s compare them step by step. ### Step 1: Understand the Numbers - **9.11** can be written as \\(9 + \\frac{11}{100}\\) - **9.9** can be written as \\(9 + \\frac{9}{10}\\) ### Step 2: Compare the Decimal Parts - The decimal part of **9.11** is **0.11** - The decimal part of **9.9** is **0.90** Now, compare **0.11** and **0.90**: \\[ 0.11 \u0026lt; 0.90 \\] ### Step 3: Conclusion Since the decimal part of **9.11** is less than that of **9.9**, it follows that: \\[ 9.11 \u0026lt; 9.9 \\] Therefore, **9.9** is greater than **9.11**. \\[ \\boxed{9.9} \\] Ollama Server 自启动 为了在开机时自启 Ollama Server，我们可以使用 systemd 来管理自动启动：\n$ sudo vim /etc/systemd/system/ollama-server.service 我们在其中填入以下内容：\n/etc/systemd/system/ollama-server.service 12 lines [Unit] Description=Ollama Server After=network.target [Service] ExecStart=ollama serve Restart=on-failure RestartSec=5 Environment=HOME=/home/\u0026lt;your home name\u0026gt; [Install] WantedBy=multi-user.target 创建完服务文件后，通过以下指令来完成 systemd 配置：\n# 重新加载 systemd 配置 $ sudo systemctl daemon-reload # 下次开机后，启动开机自启 $ sudo systemctl enable ollama-server.service # 立刻启动服务 $ sudo systemctl start ollama-server.service # 查看服务状态 $ sudo systemctl status ollama-server.service 通过Open-webui 调用本地的DeepSeek api TODO\n","permalink":"https://downmars.github.io/zh/posts/2025_02_09-ollama_deepseek_1/","summary":"\u003cblockquote class=\"quote\"\u003e\u003cp\u003e如何使用ollama-这是一个系列\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\".\"\n   \n   \n   class=\"custom-link\"\u003e  \n   通过Ollama调用DeepSeek\u003c/a\u003e\n\u0026#x1f448; 你在这里\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../2025_02_21-using_public_ip_to_freely_access_ollama\"\n   \n   \n   class=\"custom-link\"\u003e  \n   通过公网IP调用暴露的Ollama服务\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\n\u003ch2 id=\"ollama\"\u003eOllama\u003c/h2\u003e\n\u003cp\u003e\u003cblockquote class=\"quote\"\u003e\u003cp\u003e\u0026ldquo;Get up and running with large language models locally.\u0026rdquo;\u003c/p\u003e\u003c/blockquote\u003e\n\n想必大家一定从很多地方都看到过这个一直小羊驼\u0026ndash;\u003ca href=\"https://github.com/ollama/ollama\"\n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \n   class=\"custom-link\"\u003e  \n   Ollama\u003cspan class=\"external-link\"\u003e↗\u003c/span\u003e\u003c/a\u003e\n，正如官方仓库所言，Ollama旨在简化大语言模型(LLMs)的本地部署和使用，我们能够通过这个这个工具来实现轻松下载、运行和管理各种开源的大语言模型。\u003c/p\u003e","title":"通过Ollama调用DeepSeek"},{"content":"如何构建我的hugo博客-这是一个系列\nHugo博客搭建_基础 😊 Hugo博客搭建_配置 🚀 Hugo博客搭建_主题优化 🤤 \u0026#x1f448; 你在这里 ","permalink":"https://downmars.github.io/zh/posts/2025_02_05-hugo_build_3/","summary":"\u003cblockquote class=\"quote\"\u003e\u003cp\u003e如何构建我的hugo博客-这是一个系列\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../2025_01_19-hugo_build_1\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_基础 😊\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../2025_01_20-hugo_build_2\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_配置 🚀\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\".\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_主题优化 🤤\u003c/a\u003e\n\u0026#x1f448; 你在这里\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"Hugo博客搭建_主题优化 🤤"},{"content":"如何构建我的hugo博客-这是一个系列\nHugo博客搭建_基础 😊 Hugo博客搭建_配置 🚀 \u0026#x1f448; 你在这里 Hugo博客搭建_主题优化 🤤 前言 在上一篇文章“ Hugo博客搭建_基础 😊 ”中，我们讲解了如何搭建一个Hugo博客，这一篇文章将会讲解如何配置Hugo博客。\n基础配置文件 我们曾经在hugo.yaml中配置本博客的一些功能，我们将会在这一部分补充和讨论剩余的配置： hugo.yaml 101 lines # Basic Configuration (基础配置) baseURL: \u0026#34;\u0026#34; # Site URL (网站 URL)(e.g. https://downmars.github.io/) title: \u0026#34;\u0026#34; # Site title (网站标题)(e.g. DLog) theme: \u0026#34;\u0026#34; # Theme name (主题名称)(e.g. PaperMod, in /themes/) # Feature Toggles (功能开关) enableEmoji: true # Enable emoji support (启用表情支持)(e.g. https://gohugo.io/quick-reference/emojis/#smileys--emotion) enableRobotsTXT: true # Enable search engine support (启用搜索引擎支持) hasCJKLanguage: true # Enable CJK language support (启用中日韩语言支持) buildDrafts: false # Build draft posts (是否构建草稿文章) buildFuture: false # Build future posts (是否构建未来日期文章) buildExpired: false # Build expired posts (是否构建过期文章) # Parameters Configuration (参数配置) params: # Theme Settings (主题设置) defaultTheme: dark # Default theme mode (默认主题模式) disableThemeToggle: false # Allow theme switching (允许主题切换) # Display Features (显示功能) ShowShareButtons: true # Show social share buttons (显示分享按钮) ShowCodeCopyButtons: true # Show code copy buttons (显示代码复制按钮) ShowReadingTime: true # Show reading time estimate (显示阅读时间) ShowWordCount: true # Show word count (显示字数统计) ShowPostNavLinks: true # Show post navigation (显示文章导航) ShowBreadCrumbs: true # Show breadcrumb navigation (显示面包屑导航) ShowToc: true # Show table of contents (显示目录) TocOpen: true # TOC expanded by default (目录默认展开) math: true fancybox: true # Display Images (显示图片) # Comment System (评论系统) comments: true # Enable comments (启用评论) giscus: # Giscus configuration (Giscus 配置) repo: \u0026#34;\u0026#34; repoId: \u0026#34;\u0026#34; category: \u0026#34;\u0026#34; categoryId: \u0026#34;\u0026#34; mapping: \u0026#34;pathname\u0026#34; strict: \u0026#34;0\u0026#34; reactionsEnabled: \u0026#34;1\u0026#34; emitMetadata: \u0026#34;0\u0026#34; inputPosition: \u0026#34;bottom\u0026#34; lightTheme: \u0026#34;light\u0026#34; darkTheme: \u0026#34;dark\u0026#34; lang: \u0026#34;zh-CN\u0026#34; crossorigin: \u0026#34;anonymous\u0026#34; fuseOpts: # refer: https://sonnycalcr.github.io/posts/build-a-blog-using-hugo-papermod-github-pages/#%e9%85%8d%e7%bd%ae%e6%90%9c%e7%b4%a2 isCaseSensitive: false # 是否大小写敏感 shouldSort: true # 是否排序 location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 # limit: 10 # refer: https://www.fusejs.io/api/methods.html#search keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] includeMatches: true # Assets Files (资源文件) assets: favicon: \u0026#34;\u0026#34; # Site favicon (网站图标) favicon16x16: \u0026#34;\u0026#34; # Small favicon (小图标) favicon32x32: \u0026#34;\u0026#34; # Medium favicon (中图标) apple_touch_icon: \u0026#34;\u0026#34; # iOS icon (iOS 图标) safari_pinned_tab: \u0026#34;\u0026#34; # Safari icon (Safari 图标) # Multilingual Support (多语言支持) languages: zh: languageCode: \u0026#34;zh-CN\u0026#34; languageName: \u0026#34;简体中文\u0026#34; contentDir: \u0026#34;content/zh\u0026#34; weight: 1 menu: main: - identifier: posts name: \u0026#34;Posts\u0026#34; url: \u0026#34;/posts/\u0026#34; weight: 1 # Output Settings (输出设置) outputs: home: - HTML - RSS - JSON # Required for search (搜索功能需要) # Rendering Configuration (渲染配置) markup: goldmark: renderer: unsafe: true # Allow HTML in markdown (允许 Markdown 中的 HTML) highlight: codeFences: true # Enable code highlighting (启用代码高亮) guessSyntax: true # Guess code language (猜测代码语言) lineNos: true # Show line numbers (显示行号) style: dracula # Code highlight theme (代码高亮主题) lineNumbersInTable: true 功能开关 表情支持 通过启用此功能，我们能够从 Github Emoji API 和 Unicode 完整表情符号列表中读取数据。博主显出极高兴的样子，将两个指头的敲着键盘，点头说，“对呀对呀！……表情有两样写法，你知道么？”\nShortcode: :drooling_face:\u0026#x1f924;\nUnicode: \u0026amp;#x1F924🤤\n关于对应的表情和文档可以查询：\nshortcode↗ Unicode↗ Emoji 简介-阮一峰↗ 参数配置 图片放大 参考于： Hugo PaperMod 主题精装修↗ Sonny_boyThis is a caption for the image\n我们使用引入 fancybox↗ 来实现：\n在layouts/shortcodes/figure.html中加入：\nlayouts/shortcodes/figure.html 38 lines \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;figure{{ if or (.Get \u0026#34;class\u0026#34;) (eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34;) }} class=\u0026#34; {{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}align-center {{ end }} {{- with .Get \u0026#34;class\u0026#34; }}{{ . }}{{- end }}\u0026#34; {{- end -}}\u0026gt; {{- if .Get \u0026#34;link\u0026#34; -}} \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34;{{ with .Get \u0026#34;target\u0026#34; }} target=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ with .Get \u0026#34;rel\u0026#34; }} rel=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{- end }} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}{{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}#center{{- end }}\u0026#34; {{- if or (.Get \u0026#34;alt\u0026#34;) (.Get \u0026#34;caption\u0026#34;) }} alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;caption\u0026#34; | markdownify| plainify }}{{ end }}\u0026#34; {{- end -}} {{- with .Get \u0026#34;width\u0026#34; }} width=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;height\u0026#34; }} height=\u0026#34;{{ . }}\u0026#34;{{ end -}} /\u0026gt; \u0026lt;!-- Closing img tag --\u0026gt; {{- if .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end -}} {{- if or (or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;caption\u0026#34;)) (.Get \u0026#34;attr\u0026#34;) -}} \u0026lt;figcaption\u0026gt; {{ with (.Get \u0026#34;title\u0026#34;) -}} {{ . }} {{- end -}} {{- if or (.Get \u0026#34;caption\u0026#34;) (.Get \u0026#34;attr\u0026#34;) -}}\u0026lt;p\u0026gt; {{- .Get \u0026#34;caption\u0026#34; | markdownify -}} {{- with .Get \u0026#34;attrlink\u0026#34; }} \u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt; {{- end -}} {{- .Get \u0026#34;attr\u0026#34; | markdownify -}} {{- if .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/p\u0026gt; {{- end }} \u0026lt;/figcaption\u0026gt; {{- end }} \u0026lt;/figure\u0026gt; \u0026lt;/a\u0026gt; 数学公示 参考于： Hugo博客添加LaTeX语法支持↗ 、 Hugo PaperMod 主题精装修↗ 、 MathJax 与 Markdown 的究极融合↗ 上述博客中提到了相同的问题即 ”对于mathjax与markdown格式中，hugo在渲染的过程中将_渲染为了\u0026lt;em\u0026gt;标签，导致mathjax在渲染的时候找不到原来正确的公示“。\n首先，我们在hugo.yaml中添加：\nhugo.yaml 2 lines params: math: true 接着，我们在layouts/partials/mathjax.html中添加： layouts/partials/mathjax.html 25 lines \u0026lt;script type=\u0026#34;text/javascript\u0026#34; async src=\u0026#34;https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML\u0026#34;\u0026gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[\u0026#39;$\u0026#39;,\u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;,\u0026#39;\\\\)\u0026#39;]], displayMath: [[\u0026#39;$$\u0026#39;,\u0026#39;$$\u0026#39;], [\u0026#39;\\[\\[\u0026#39;,\u0026#39;\\]\\]\u0026#39;]], processEscapes: true, processEnvironments: true, skipTags: [\u0026#39;script\u0026#39;, \u0026#39;noscript\u0026#39;, \u0026#39;style\u0026#39;, \u0026#39;textarea\u0026#39;, \u0026#39;pre\u0026#39;], TeX: { equationNumbers: { autoNumber: \u0026#34;AMS\u0026#34; }, extensions: [\u0026#34;AMSmath.js\u0026#34;, \u0026#34;AMSsymbols.js\u0026#34;] } } }); MathJax.Hub.Queue(function() { // Fix \u0026lt;code\u0026gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i \u0026lt; all.length; i += 1) { all[i].SourceElement().parentNode.className += \u0026#39; has-jax\u0026#39;; } }); \u0026lt;/script\u0026gt; 接着，在layouts/partials/extend_footer.html中添加：\nlayouts/partials/extend_footer.html 25 lines \u0026lt;script\u0026gt; (function () { var i, text, code, codes = document.getElementsByTagName(\u0026#34;code\u0026#34;); for (i = 0; i \u0026lt; codes.length; ) { code = codes[i]; if (code.parentNode.tagName !== \u0026#34;PRE\u0026#34; \u0026amp;\u0026amp; code.childElementCount === 0) { text = code.textContent; if (/^\\$[^$]/.test(text) \u0026amp;\u0026amp; /[^$]\\$$/.test(text)) { text = text.replace(/^\\$/, \u0026#34;\\\\(\u0026#34;).replace(/\\$$/, \u0026#34;\\\\)\u0026#34;); code.textContent = text; } if ( /^\\\\\\((.|\\s)+\\\\\\)$/.test(text) || /^\\\\\\[(.|\\s)+\\\\\\]$/.test(text) || /^\\$(.|\\s)+\\$$/.test(text) || /^\\\\begin\\{([^}]+)\\}(.|\\s)+\\\\end\\{[^}]+\\}$/.test(text) ) { code.outerHTML = code.innerHTML; // remove \u0026lt;code\u0026gt;\u0026lt;/code\u0026gt; continue; } } i++; } })(); \u0026lt;/script\u0026gt; 最后，在layouts/partials/extend_head.html中添加来判断hugo.yaml中是否启用来决定是否渲染：\nlayouts/partials/extend_head.html 3 lines {{ if or .Params.math .Site.Params.math }} {{- partial \u0026#34;mathjax.html\u0026#34; .}} {{ end }} 本处引用的方法通过将带有公式部分使用代码block装饰起来，避免内容被修改，再将代码block去除，完整将其送给渲染工具。\n没做处理之前，以下代码无法渲染：\n$$ \\frac{\\partial E(\\boldsymbol{w})}{\\partial z_j} = \\sum\\limits_{k}\\frac{\\partial E(\\boldsymbol{w})}{\\partial y_{k}}\\frac{\\partial y_k}{\\partial z_{j}}= \\sum\\limits_{k} (y_{k}- \\hat{y}_{k}) w_{kj}^{(2)} \\tag{5.11} $$ 现有几个问题待解决：1、白色黑色主题字体颜色未翻转；2、字体大小没有自动渲染正确，在中间的一个步骤，使能够正常匹配主题的颜色和字体大小，但是完全渲染过后就会出现刚才提及的问题，可能的解决方法参考于 解决 mathjax 数学公式渲染的字体大小问题↗ 目录配置 对于自带的目录，只显示在文章最上面，既不能让读者随时掌握到阅读进度，也不够优雅，所以我在参考了 在PaperMod中引入侧边目录和阅读进度显示↗ 基础上做了一些改动\n自动编号 当前浏览章节下划线显示 创建 layout/partials/toc.html , layouts/partials/toc.hmtl 265 lines \u0026lt;!-- 目录侧边栏 --\u0026gt; {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; let headerCounters = {}; // 重置所有计数器 function resetHeaderCounters() { headerCounters = {}; } // header计数器逻辑 function getHeaderNumber(element, headerLevel) { // 获取之前的所有标题元素 let prevElements = Array.from(document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;)); let currentIndex = prevElements.indexOf(element); let counters = new Array(6).fill(0); // 初始化6级计数器 let numbers = []; for (let i = 0; i \u0026lt;= currentIndex; i++) { let currentElement = prevElements[i]; let currentLevel = parseInt(currentElement.tagName.substring(1)) - 1; // 转为0-based // 重置子级计数器 for (let l = currentLevel + 1; l \u0026lt; 6; l++) { counters[l] = 0; } // 递增当前级计数器 counters[currentLevel]++; // 如果是目标元素则记录编号 if (currentElement === element) { for (let l = 0; l \u0026lt;= currentLevel; l++) { if (counters[l] \u0026gt; 0) { numbers.push(counters[l]); } } break; } } return numbers.join(\u0026#39;.\u0026#39;); } // 更新目录项的显示 function updateTocDisplay(element, tocLink) { const headerLevel = parseInt(element.tagName.substring(1)); const currentNumber = getHeaderNumber(element, headerLevel); // 移除之前可能存在的编号 let linkText = tocLink.textContent; linkText = linkText.replace(/^\\d+(\\.\\d+)*\\s+/, \u0026#39;\u0026#39;); // 添加新的编号 tocLink.textContent = `${currentNumber} ${linkText}`; } // 获取元素的顶部偏移 function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } // 检查TOC位置 function checkTocPosition() { const width = document.body.scrollWidth; const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } // 初始化时的处理 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); if (elements.length \u0026gt; 0) { // 设置第一个标题为活动状态 activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } // 初始化所有标题的编号 if (elements \u0026amp;\u0026amp; elements.length \u0026gt; 0) { elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); const tocLink = document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`); if (tocLink) { updateTocDisplay(element, tocLink); } }); } // 添加返回顶部链接的事件监听 const topLink = document.getElementById(\u0026#39;top-link\u0026#39;); if (topLink) { topLink.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { event.preventDefault(); window.scrollTo({ top: 0, behavior: \u0026#39;smooth\u0026#39; }); }); } }, false); // 窗口大小改变时的处理 window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); // 滚动时的处理 window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { const scrollPosition = window.pageYOffset || document.documentElement.scrollTop; if (scrollPosition === 0) { return; } if (elements \u0026amp;\u0026amp; elements.length \u0026gt; 0) { // 重置计数器 resetHeaderCounters(); // 查找当前可见的标题 activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - scrollPosition) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - scrollPosition) \u0026lt; window.innerHeight / 2) { return element; } }) || activeElement; // 更新所有目录项的显示 elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); const tocLink = document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`); if (tocLink) { updateTocDisplay(element, tocLink); if (element === activeElement) { tocLink.classList.add(\u0026#39;active\u0026#39;); tocLink.style.textDecoration = \u0026#34;underline\u0026#34;; // 确保当前激活的标题在目录中可见 const tocContainer = document.querySelector(\u0026#39;.toc .inner\u0026#39;); const linkOffsetTop = tocLink.offsetTop; const containerHeight = tocContainer.clientHeight; const linkHeight = tocLink.clientHeight; // 计算滚动位置，将当前目录项居中显示 const scrollPosition = linkOffsetTop - (containerHeight / 2) + (linkHeight / 2); tocContainer.scrollTo({ top: scrollPosition, behavior: \u0026#39;smooth\u0026#39; }); } else { tocLink.classList.remove(\u0026#39;active\u0026#39;); tocLink.style.textDecoration = \u0026#34;none\u0026#34;; } } }); } }, false); \u0026lt;/script\u0026gt; {{- end }} 创建assets/css/extended/toc.css，根据阅读内容滚动并加粗相应标题就由其实现。\nassets/css/extended/toc.css 88 lines /*目录侧边栏*/ :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } /*目录侧边栏*/ 为正文添加章节序号，参考于 初始化 \u0026amp; 设置 PaperMod 主题的基础功能↗ ，我们在assets/css/common/post-single.css中添加以下内容： assets/css/common/post-single.css 56 lines main { counter-reset: h1-cnt h2-cnt h3-cnt h4-cnt h5-cnt h6-cnt; } .post-content h1 { counter-increment: h1-cnt; counter-reset: h2-cnt h3-cnt h4-cnt h5-cnt h6-cnt; /* Reset lower levels */ } .post-content h2 { counter-increment: h2-cnt; counter-reset: h3-cnt h4-cnt h5-cnt h6-cnt; /* Reset lower levels */ } .post-content h3 { counter-increment: h3-cnt; counter-reset: h4-cnt h5-cnt h6-cnt; /* Reset lower levels */ } .post-content h4 { counter-increment: h4-cnt; counter-reset: h5-cnt h6-cnt; /* Reset lower levels */ } .post-content h5 { counter-increment: h5-cnt; counter-reset: h6-cnt; /* Reset lower levels */ } .post-content h6 { counter-increment: h6-cnt; } .post-content h1::before { content: counter(h1-cnt) \u0026#39;. \u0026#39;; } .post-content h2::before { content: counter(h2-cnt) \u0026#39;. \u0026#39;; } .post-content h3::before { content: counter(h2-cnt) \u0026#39;.\u0026#39; counter(h3-cnt) \u0026#39;. \u0026#39;; } .post-content h4::before { content: counter(h2-cnt) \u0026#39;.\u0026#39; counter(h3-cnt) \u0026#39;.\u0026#39; counter(h4-cnt) \u0026#39;. \u0026#39;; } .post-content h5::before { content: counter(h2-cnt) \u0026#39;.\u0026#39; counter(h3-cnt) \u0026#39;.\u0026#39; counter(h4-cnt) \u0026#39;.\u0026#39; counter(h5-cnt) \u0026#39;. \u0026#39;; } .post-content h6::before { content: counter(h2-cnt) \u0026#39;.\u0026#39; counter(h3-cnt) \u0026#39;.\u0026#39; counter(h4-cnt) \u0026#39;.\u0026#39; counter(h5-cnt) \u0026#39;.\u0026#39; counter(h6-cnt) \u0026#39;. \u0026#39;; } 同时，由于一号标题有40px大小，推荐从二号标题开始排序。\n评论支持 对于评论支持，我选择了 Giscus↗ 。由于本博客也是部署在Github上，在减少额外操作的同时 Giscus 也显得足够的优雅简单。\n此处操作参考了 Hugo 博客引入 Giscus 评论系统↗ 。\nGiscus↗ -\u0026gt; 进入配置栏 配置 -\u0026gt; 仓库 -\u0026gt; 填入仓库名，如 Downmars/Downmars.github.io↗ -\u0026gt; 若不满足条件，分别查看：对应仓库是否公开、giscus app 是否安装、 Discussions 功能在对应仓库是否启用 配置 -\u0026gt; Discussions 分类 -\u0026gt; 选中Announcements 配置 -\u0026gt; 启用giscus -\u0026gt; 复制相应字段到配置中 同时需要创建 layouts/partials/comments.html，此处参考了 Hugo + PaperMod + Github Pages 搭建一个完善的个人博客(以 Windows11 为例)↗ 。\nlayouts/partials/comments.html 53 lines {{- /* Comments area start */ -}} {{- /* to add comments read =\u0026gt; https://gohugo.io/content-management/comments/ */ -}} \u0026lt;div id=\u0026#34;tw-comment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 默认是暗色，根目录下的配置中的主题默认也是暗色 const getStoredTheme = () =\u0026gt; localStorage.getItem(\u0026#34;pref-theme\u0026#34;) === \u0026#34;light\u0026#34; ? \u0026#34;{{ .Site.Params.giscus.lightTheme }}\u0026#34; : \u0026#34;{{ .Site.Params.giscus.darkTheme }}\u0026#34;; const setGiscusTheme = () =\u0026gt; { const sendMessage = (message) =\u0026gt; { const iframe = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (iframe) { iframe.contentWindow.postMessage({giscus: message}, \u0026#39;https://giscus.app\u0026#39;); } } sendMessage({setConfig: {theme: getStoredTheme()}}) } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const giscusAttributes = { \u0026#34;src\u0026#34;: \u0026#34;https://giscus.app/client.js\u0026#34;, \u0026#34;data-repo\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repo }}\u0026#34;, \u0026#34;data-repo-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repoId }}\u0026#34;, \u0026#34;data-category\u0026#34;: \u0026#34;{{ .Site.Params.giscus.category }}\u0026#34;, \u0026#34;data-category-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.categoryId }}\u0026#34;, \u0026#34;data-mapping\u0026#34;: \u0026#34;{{ .Site.Params.giscus.mapping }}\u0026#34;, \u0026#34;data-strict\u0026#34;: \u0026#34;{{ .Site.Params.giscus.strict }}\u0026#34;, \u0026#34;data-reactions-enabled\u0026#34;: \u0026#34;{{ .Site.Params.giscus.reactionsEnabled }}\u0026#34;, \u0026#34;data-emit-metadata\u0026#34;: \u0026#34;{{ .Site.Params.giscus.emitMetadata }}\u0026#34;, \u0026#34;data-input-position\u0026#34;: \u0026#34;{{ .Site.Params.giscus.inputPosition }}\u0026#34;, \u0026#34;data-theme\u0026#34;: getStoredTheme(), \u0026#34;data-lang\u0026#34;: \u0026#34;{{ .Site.Params.giscus.lang }}\u0026#34;, \u0026#34;data-loading\u0026#34;: \u0026#34;lazy\u0026#34;, \u0026#34;crossorigin\u0026#34;: \u0026#34;anonymous\u0026#34;, }; // 动态创建 giscus script const giscusScript = document.createElement(\u0026#34;script\u0026#34;); Object.entries(giscusAttributes).forEach( ([key, value]) =\u0026gt; giscusScript.setAttribute(key, value)); document.querySelector(\u0026#34;#tw-comment\u0026#34;).appendChild(giscusScript); // 页面主题变更后，变更 giscus 主题 const themeSwitcher = document.querySelector(\u0026#34;#theme-toggle\u0026#34;); if (themeSwitcher) { themeSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } const themeFloatSwitcher = document.querySelector(\u0026#34;#theme-toggle-float\u0026#34;); if (themeFloatSwitcher) { themeFloatSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } }); \u0026lt;/script\u0026gt; {{- /* Comments area end */ -}} 网站图标 咱们一个自己的博客肯定得需要有自己的一个网站图标，可以将图标放在/static/images/，如favicon: \u0026quot;/images/blog.png\u0026quot;。我在这里推荐两个网站供大家用来查找符合自己图标。\nfontawesome↗ flaticon↗ icons8↗ iconfinder↗ Noun Project↗ 多语言 \u0026amp; 界面布置 这部分参考来自于 Hugo 多语言博客搭建，如何优雅地管理多语言 md 内容-贤民↗ 。\n我认为对于编写博客的我们来说，以时间的形式来分隔是很好的一种方式来存储以及管理我们的博客，使用统一文件命名规范YYYYMMDD-title.md。此外，有兴趣的可以做一下多语言的准备，即使现在没有推出多语言的打算，之后可以集中找个时间来使用ai工具来统一做一下。\n$ tree . . ├── en │ ├── archives │ │ └── archives.md │ ├── posts │ │ └── 2025_01_19-hugo_build_1.md │ └── search │ └── search.md └── zh ├── archives │ └── archives.md ├── posts │ ├── 2025_01_19-hugo_build_1.md │ └── 2025_01_20-hugo_build_2.md └── search └── search.md 可以参考我的示例结构，在这里我将zh/和en/作为post/的直接子目录，这一步需在对应的语言下添加设置对应的文档目录，如contentDir: \u0026quot;content/zh\u0026quot;。\n我们在此处同时需要设置页面布局，创建zh/archives/archives.md和zh/search/search.md，\nzh/archives/archives.md 5 lines --- title: \u0026#34;时间轴\u0026#34; layout: \u0026#34;archives\u0026#34; summary: archives --- zh/search/search.md 5 lines --- title: \u0026#34;搜索\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary summary: \u0026#34;search\u0026#34; --- 其中layout字段指定了这个页面使用的模板，默认使用的是themes\\\u0026lt;hugo_theme\u0026gt;\\layouts\\_default\\archives.html\u0026amp;search.html，所以我们使用默认字段search和archives即可以让归档内容正常显示。\n同时，参考 Hugo + PaperMod + Github Pages 搭建一个完善的个人博客(以 Windows11 为例)↗ 搜索需要额外加入如下配置：\nhugo.yaml 20 lines params: # 搜索 fuseOpts: # 个性化配置 refer: https://sonnycalcr.github.io/posts/build-a-blog-using-hugo-papermod-github-pages/#%e9%85%8d%e7%bd%ae%e6%90%9c%e7%b4%a2 isCaseSensitive: false # 是否大小写敏感 shouldSort: true # 是否排序 location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 # limit: 10 # refer: https://www.fusejs.io/api/methods.html#search keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] includeMatches: true # ...... outputs: home: - HTML - RSS - JSON # Required for search (搜索功能需要) 接着，我们在配置文件中加入时间轴与搜索的布局即可：\nhugo.yaml 13 lines # Multilingual Support (多语言支持) languages: zh: languageCode: \u0026#34;zh-CN\u0026#34; languageName: \u0026#34;简体中文\u0026#34; contentDir: \u0026#34;content/zh\u0026#34; weight: 1 menu: main: - identifier: posts name: \u0026#34;Posts\u0026#34; url: \u0026#34;/posts/\u0026#34; weight: 1 渲染配置 代码配置 PaperMod主题使用的代码高亮工具为 Chroma↗ ，可能不太聪明，但是对于我的日常使用暂时没有太大问题。 我在后面换了个代码渲染方式。\nChroma自带的配色方案预览： https://xyproto.github.io/splash/docs/longer/all.html↗ 参考于： 深入探究 Hugo 代码高亮↗ 、 代码块语法高亮及复制↗ hugo.yaml 7 lines markup: highlight: codeFences: true guessSyntax: true lineNos: true style: dracula lineNumbersInTable: true 我这里参考了 Hugo PaperMod 主题精装修↗ 的代码渲染方式，在其中选择了 atom-one-dark/light↗ 与 atom-one-dark.css↗ 。\n为了覆盖掉原主题对于代码渲染的设置，我们需要创建assets/css/hljs/an-old-hope.min.css，并且在其中复制进去黑色主题和白色主题的配置，白色主题直接复制进去皆可，黑色主题需要以以下形式进行限定：\nassets/css/hljs/an-old-hope.min.css 7 lines body.dark { .hljs { color: #abb2bf; background: #282c34; } ... } 接着，我们需要修改白色与黑色主题的背景色，同时由于我参考的博主使用了Consolas 和霞鹜文楷（注释的中文字体），字体可以从 博主的仓库↗ 中获取。\n我们在assets/css/extended/blank.css中添加：\nassets/css/extended/blank.css 29 lines @font-face { font-family: \u0026#34;Consolas\u0026#34;; src: url(\u0026#34;/fonts/Consolas.woff2\u0026#34;); } code { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; } .post-content code { margin: auto 4px; padding: 4px 6px; font-size: 0.8em; line-height: 1.5; background: var(--code-bg); } .post-content pre code { display: block; margin: auto 0; padding: 10px; background: var(--hljs-bg) !important; color: var(--content); border-radius: var(--radius); overflow-x: auto; word-break: break-all; font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; font-size: 15px; } 并且，在PaperMod中的颜色变量配置assets/css/core/theme-vars.css 中添加配置：\nassets/css/core/theme-vars.css 12 lines /* 省略的内容请拷贝原先主题对应的文件 */ :root { ... --hljs-bg: #f7f7f7; --code-bg: rgb(245, 245, 245); } .dark { ... --hljs-bg: rgb(46, 46, 51); --code-bg: rgb(55, 56, 62); } 我们还会用到 highlight.js↗ 用来添加高亮：\nlayouts/_default/baseof.html 30 lines {{- if lt hugo.Version \u0026#34;0.125.7\u0026#34; }} {{- errorf \u0026#34;=\u0026gt; hugo v0.125.7 or greater is required for hugo-PaperMod to build \u0026#34; }} {{- end -}} \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ site.Language }}\u0026#34; dir=\u0026#34;{{ .Language.LanguageDirection | default \u0026#34;auto\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; + \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css\u0026#34;\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34; {{- if (or (ne .Kind `page` ) (eq .Layout `archives`) (eq .Layout `search`)) -}} {{- print \u0026#34;list\u0026#34; -}} {{- end -}} {{- if eq site.Params.defaultTheme `dark` -}} {{- print \u0026#34; dark\u0026#34; }} {{- end -}} \u0026#34; id=\u0026#34;top\u0026#34;\u0026gt; {{- partialCached \u0026#34;header.html\u0026#34; . .Page -}} \u0026lt;main class=\u0026#34;main\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/main\u0026gt; + {{ partialCached \u0026#34;footer.html\u0026#34; . .Layout .Kind (.Param \u0026#34;hideFooter\u0026#34;) (.Param \u0026#34;ShowCodeCopyButtons\u0026#34;) -}} \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;hljs.highlightAll();\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 此外，PaperMod 默认的代码复制键的在对应语言下是不同的文字表示复制粘贴，我觉的不够优雅，于是打算使用图标来代替。关于复制符号的配置在layouts/partials/footer.html 中：\nlayouts/partials/footer.html 8 lines copybutton.innerHTML = \u0026#39;{{- i18n \u0026#34;code_copy\u0026#34; | default \u0026#34;copy\u0026#34; }}\u0026#39;; function copyingDone() { copybutton.innerHTML = \u0026#39;{{- i18n \u0026#34;code_copied\u0026#34; | default \u0026#34;copied!\u0026#34; }}\u0026#39;; setTimeout(() =\u0026gt; { copybutton.innerHTML = \u0026#39;{{- i18n \u0026#34;code_copy\u0026#34; | default \u0026#34;copy\u0026#34; }}\u0026#39;; }, 2000); } 修改为：\nlayouts/partials/footer.html 26 lines copybutton.innerHTML = ` \u0026lt;img src=\u0026#34;/images/copy.svg\u0026#34; alt=\u0026#34;复制\u0026#34; class=\u0026#34;copy-icon\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; `; function copyingDone() { copybutton.innerHTML = ` \u0026lt;img src=\u0026#34;/images/check.svg\u0026#34; alt=\u0026#34;已复制\u0026#34; class=\u0026#34;copied-icon\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; `; setTimeout(() =\u0026gt; { copybutton.innerHTML = ` \u0026lt;img src=\u0026#34;/images/copy.svg\u0026#34; alt=\u0026#34;复制\u0026#34; class=\u0026#34;copy-icon\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; `; }, 2000); } 我这里在存放的图片位于static/images/，大家可以选择自己的路径。由于编译为静态博客之后，static/images/变为public/images/，同时以public/当作根目录，所以我在代码中使用/images/check.svg\u0026amp;copy.svg。\n接下来，我们配置复制图标样式，在assets/css/extend.css中添加以下代码：\nassets/css/extend.css 20 lines /*copy_button*/ .copy-code { background: transparent; border: none; cursor: pointer; padding: 4px; position: absolute; right: 10px; top: -2px; } .copy-code img { opacity: 0.6; transition: opacity 0.3s, filter 0.3s; /* 添加 filter 过渡效果 */ } .copy-code:hover img { opacity: 1; filter: invert(100%); /* 颜色翻转效果 */ } 我这里使用的是底色为黑色的svg图标，所以我这里做了反色处理。\n接下来我们配置代码折叠，对于过长的代码段，十分影响阅读者的感受，参考于 Hugo PaperMod 主题精装修↗ ，我们需要在layouts/shortcodes/collapse.html中加入以下内容：\nlayouts/shortcodes/collapse.html 41 lines {{/* 参数处理逻辑 */}} {{ $threshold := default 15 (.Get \u0026#34;collapseThreshold\u0026#34;) | int }} {{ $forceCollapse := eq (.Get \u0026#34;forceCollapse\u0026#34;) \u0026#34;true\u0026#34; }} {{ $openByDefault := eq (.Get \u0026#34;openByDefault\u0026#34;) \u0026#34;true\u0026#34; }} {{/* 内容处理逻辑 */}} {{ $rawContent := .Inner }} {{ $content := $rawContent | markdownify }} {{/* 精确行数计算（排除代码块标记和空行） */}} {{ $cleanedContent := replaceRE `(?s)\u0026lt;pre.*?\u0026gt;\\n?` \u0026#34;\u0026#34; $content }} {{ $cleanedContent := replaceRE `(?s)\u0026lt;/pre\u0026gt;\\n?` \u0026#34;\u0026#34; $cleanedContent }} {{ $lines := split $cleanedContent \u0026#34;\\n\u0026#34; }} {{ $lineCount := -1 }} {{ range $line := $lines }} {{ if ne (trim $line \u0026#34; \u0026#34;) \u0026#34;\u0026#34; }} {{ $lineCount = add $lineCount 1 }} {{ end }} {{ end }} {{/* 自动折叠判断逻辑 */}} {{ $shouldOpen := cond $forceCollapse false (or $openByDefault (lt $lineCount $threshold)) }} {{/* 错误处理 */}} {{ if not (.Get \u0026#34;summary\u0026#34;) }} {{ warnf \u0026#34;missing value for param \u0026#39;summary\u0026#39;: %s\u0026#34; .Position }} {{ end }} \u0026lt;p\u0026gt;\u0026lt;details class=\u0026#34;custom-collapse\u0026#34; {{ if $shouldOpen }}open{{ end }}\u0026gt; \u0026lt;summary markdown=\u0026#34;span\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ .Get \u0026#34;summary\u0026#34; | markdownify }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;line-count\u0026#34;\u0026gt;{{ $lineCount }} lines\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; {{ $content }} \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt;\u0026lt;/p\u0026gt; 额外配置 正文宽度 我们复制对应目录assets/css/core/theme-vars.css，并修改以下行： assets/css/core/theme-vars.css 2 lines root: --main-width: 740px; 文章封面图移至侧边 当我们文章存在封面的时候，在archives中文章的排布中，图片占了大部分空间，十分影响我们的观感。通过参考： Hugo博客文章封面图片缩小并移到侧边 | PaperMod主题↗ ，我们可以这样配置： layouts/_default/list.html 33 lines \u0026lt;article class=\u0026#34;{{ $class }}\u0026#34;\u0026gt; - {{- $isHidden := (.Param \u0026#34;cover.hiddenInList\u0026#34;) | default (.Param \u0026#34;cover.hidden\u0026#34;) | default false }} - {{- partial \u0026#34;cover.html\u0026#34; (dict \u0026#34;cxt\u0026#34; . \u0026#34;IsSingle\u0026#34; false \u0026#34;isHidden\u0026#34; $isHidden) }} + \u0026lt;div class=\u0026#34;post-info\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;entry-header\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;entry-hint-parent\u0026#34;\u0026gt; {{- .Title }} {{- if .Draft }} \u0026lt;span class=\u0026#34;entry-hint\u0026#34; title=\u0026#34;Draft\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; height=\u0026#34;20\u0026#34; viewBox=\u0026#34;0 -960 960 960\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M160-410v-60h300v60H160Zm0-165v-60h470v60H160Zm0-165v-60h470v60H160Zm360 580v-123l221-220q9-9 20-13t22-4q12 0 23 4.5t20 13.5l37 37q9 9 13 20t4 22q0 11-4.5 22.5T862.09-380L643-160H520Zm300-263-37-37 37 37ZM580-220h38l121-122-18-19-19-18-122 121v38Zm141-141-19-18 37 37-18-19Z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/span\u0026gt; {{- end }} \u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; {{- if (ne (.Param \u0026#34;hideSummary\u0026#34;) true) }} \u0026lt;div class=\u0026#34;entry-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ .Summary | plainify | htmlUnescape }}{{ if .Truncated }}...{{ end }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {{- end }} {{- if not (.Param \u0026#34;hideMeta\u0026#34;) }} \u0026lt;footer class=\u0026#34;entry-footer\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} \u0026lt;/footer\u0026gt; {{- end }} + \u0026lt;/div\u0026gt; + {{- $isHidden := (.Param \u0026#34;cover.hiddenInList\u0026#34;) | default (.Param \u0026#34;cover.hidden\u0026#34;) | default false }} + {{- partial \u0026#34;cover.html\u0026#34; (dict \u0026#34;cxt\u0026#34; . \u0026#34;IsSingle\u0026#34; false \u0026#34;isHidden\u0026#34; $isHidden) }} \u0026lt;a class=\u0026#34;entry-link\u0026#34; aria-label=\u0026#34;post link to {{ .Title | plainify }}\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{- end }} assets/css/common/post-entry.css 20 lines /* F2 make the cover in the side on blogs page */ .post-entry { display: flex; flex-direction: row; align-items: center; } .post-info { display: inline-block; overflow: hidden; width: 90%; } .post-entry .entry-cover { overflow: hidden; padding-right: 18px; height: 80%; width: 40%; margin-bottom: unset; } 字体配置 我已经忍这个默认字体很久了，现在我们就在这里干掉他。我们在这里选择的中文是 霞鹜文楷↗ ，英文是 Apple 的字体 SF Pro Text Regular 来渲染，方法参考于： Hugo PaperMod 主题精装修↗ 。\n在assets/css/extended/blank.css中加入：\nassets/css/extended/blank.css 19 lines @font-face { font-family: \u0026#34;LXGWWenKaiScreenR\u0026#34;; src: url(\u0026#34;/fonts/lxgwwenkaiscreen.subset.v1.235.standard.woff2\u0026#34;); } /* https://www.webfontfree.com/cn/download/SFProText-Regular */ @font-face { font-family: \u0026#34;SFProText-Regular\u0026#34;; src: url(\u0026#34;/fonts/SFProText-Regular.woff2\u0026#34;); } body { font-family: \u0026#34;SFProText-Regular\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; font-size: 16px; line-height: 1.6; word-break: break-word; background: var(--theme); font-display: swap; } 字体可以从我上面提及博主的 github仓库↗ 处获取。\n知识共享协议 参考于: Hugo+PaperMod 双语博客搭建 Home-Info+Profile Mode↗ 、 Hugo ʕ•ᴥ•ʔ Bear Blog↗ 我们在 Creative Commons许可证↗ 中选择使用的知识共享协议，我这里选择的是CC-BY-NC-4协议，并添加一个协议模组来自动呈现：\n首先创建文件data/licenses.html并添加\ndata/licenses.html 14 lines # data/licenses.yml CC-BY-NC-4.0: name: \u0026#34;CC BY-NC 4.0\u0026#34; url: \u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; icons: \u0026amp;cc_icons # 锚点复用图标列表 - cc.svg - by.svg - nc.svg # 其他协议 CC-BY-SA-4.0: name: \u0026#34;CC BY-SA 4.0\u0026#34; url: \u0026#34;https://creativecommons.org/licenses/by-sa/4.0/\u0026#34; icons: *cc_icons # 复用图标列表 其次，创建文件layouts/partials/license.html并添加：\nlayouts/partials/license.html 35 lines \u0026lt;hr\u0026gt; \u0026lt;!-- 添加分割线 --\u0026gt; {{ $license := index site.Data.licenses .Params.license }} {{ if $license }} \u0026lt;div class=\u0026#34;license-declaration\u0026#34; vocab=\u0026#34;https://schema.org/\u0026#34; typeof=\u0026#34;CreativeWork\u0026#34;\u0026gt; {{/* 自动检测主题模式 */}} {{ $theme := \u0026#34;light\u0026#34; }} {{ if or (eq .Site.Params.colorTheme \u0026#34;dark\u0026#34;) (in .Site.Params.colorTheme \u0026#34;auto\u0026#34;) }} {{ $theme = \u0026#34;dark\u0026#34; }} {{ end }} \u0026lt;meta property=\u0026#34;name\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;link property=\u0026#34;copyrightHolder\u0026#34; href=\u0026#34;{{ .Site.BaseURL }}#author\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; \u0026lt;span property=\u0026#34;license\u0026#34; content=\u0026#34;{{ $license.url }}\u0026#34;\u0026gt;本文采用\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;{{ $license.url }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;license noopener noreferrer\u0026#34; class=\u0026#34;license-badge\u0026#34; data-theme=\u0026#34;{{ $theme }}\u0026#34; \u0026gt; {{ $license.name }} {{ range $icon := $license.icons }} \u0026lt;img src=\u0026#34;https://mirrors.creativecommons.org/presskit/icons/{{ $icon }}\u0026#34; alt=\u0026#34;{{ $icon | replaceRE `\\.svg$` `` | upper }} 图标\u0026#34; class=\u0026#34;license-icon\u0026#34; loading=\u0026#34;lazy\u0026#34; decoding=\u0026#34;async\u0026#34; \u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 接下来，创建文件assets/extended/custom.css并添加：\nassets/extended/custom.css 60 lines /* licenses.css */ .license-badge { --bg-light: #f8f9fa; --bg-dark: #2b2d32; --text-light: #212529; --text-dark: #f8f9fa; display: inline-flex; align-items: center; gap: 6px; padding: 8px 16px; border-radius: 6px; font-size: 0.9em; transition: all 0.3s ease; /* 默认浅色主题 */ background: var(--bg-light); color: var(--text-light); border: 1px solid rgba(0,0,0,0.1); } .license-icon { height: 24px; width: auto; transition: filter 0.3s ease; } /* 深色主题检测 */ @media (prefers-color-scheme: dark) { .license-badge:not([data-theme=\u0026#34;light\u0026#34;]) { background: var(--bg-dark); color: var(--text-dark); border-color: rgba(255,255,255,0.1); \u0026amp; .license-icon { filter: invert(1) hue-rotate(180deg); /* 更自然的反色 */ } } } /* 强制深色模式 */ .license-badge[data-theme=\u0026#34;dark\u0026#34;] { background: var(--bg-dark); color: var(--text-dark); border-color: rgba(255,255,255,0.1); \u0026amp; .license-icon { filter: invert(1) hue-rotate(180deg); } } /* 悬停效果 */ .license-badge:hover { transform: translateY(-1px); box-shadow: 0 2px 8px rgba(0,0,0,0.1); \u0026amp;[data-theme=\u0026#34;dark\u0026#34;]:hover { box-shadow: 0 2px 8px rgba(255,255,255,0.1); } } 最后，在archetypes/default.md中添加以下代码段即可实现一个自动添加的开源协议呈现模组。\narchetypes/default.md 1 lines license: \u0026#34;CC-BY-NC-4.0\u0026#34; # 你对应使用的协议 呈现效果如下：\nCC-BY-NC-4 但是，由于我对于前端不是很了解，黑夜模式下的样式调整未能正确实现，待解决。\n超链接 hugo的默认超链接是以当前页面打开，这对于我们的阅读体验是很糟糕的，参考于 Hugo 设置外部链接用新窗口打开↗ ，我们将外部链接使用新窗口打开并在链接后面添加一个小箭头，而本博客的内容使用当前窗口打开并不添加后缀：\nlayouts/_default/_markup/render-link.html 10 lines \u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34; {{ with .Title }} title=\u0026#34;{{ . }}\u0026#34;{{ end }} {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; {{ end }}\u0026gt; {{ .Text | safeHTML }} {{- if strings.HasPrefix .Destination \u0026#34;http\u0026#34; -}} \u0026lt;span class=\u0026#34;external-link\u0026#34;\u0026gt;↗\u0026lt;/span\u0026gt; {{- end -}} \u0026lt;/a\u0026gt; 同时在添加小尖头样式：\nassets/extended/custom.css 7 lines .external-link { display: inline-block; margin-left: 0.2em; font-size: 0.8em; text-decoration: none; vertical-align: super; } 外部链接： 我的github主页↗ 内部链接： Hugo博客搭建_基础 😊 修改时间 原本主题并没有显示「修改时间」的功能，我在这里参考了 Hugo PaperMod 主题精装修↗ 。\n在layouts/partials/post_meta.html中添加以下内容，参考的博客中$scratch.Add错误被包裹在()中，并且行末还有一个多余的$，我在此做了修改：\nlayouts/partials/post_meta.html 5 lines {{- if (.Param \u0026#34;ShowLastMod\u0026#34;) -}} {{- if ne (.Lastmod.Format \u0026#34;2006-01-02\u0026#34;) (.Date.Format \u0026#34;2006-01-02\u0026#34;) -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;Updated:\u0026amp;nbsp;%s\u0026#34; (.Lastmod.Format (.Site.Params.dateFormat | default \u0026#34;January 2, 2006\u0026#34;)))) -}} {{- end -}} {{- end -}} 并且，在hugo.yaml中加入：\nhugo.yaml 2 lines params: showLastMod: true 同时，我们在archetypes/default.md中的配置如下：\narchetypes/default.md 5 lines --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} --- 等我过几天看看这个效果咋样。\nMarginNote 在这里十分感谢 Yunpeng Tai↗ 的博客，我从上面学习和摘选了很多内容在本文中。\n我在此处对于样式做了部分修改，在assets/extended/custom.css：\nassets/extended/custom.css 75 lines .sidenote { float: right; clear: right; position: relative; margin-top: 1rem; max-width: 300px; padding: 8px 16px; /* 增加内边距以便有足够空间 */ border: 2px solid transparent; /* 默认透明边框 */ border-radius: var(--radius); /* 圆角 */ box-shadow: 0 2px 4px var(--sidenote-shadow1); /* 默认轻微阴影 */ transition: all 0.3s ease; /* 增加平滑过渡效果 */ } /* Wide viewport */ @media (min-width: 1400px) { .sidenote { float: right; clear: right; margin-right: -20vw; text-align: left; top: -3rem; width: 20vw; margin-top: 1rem; } } /* Narrow viewport */ @media (max-width: 1400px) { .sidenote { float: right; text-align: left; width: 100%; margin: 1rem 0; padding-left: 15%; } } /* 定义数字编号的外观 */ .sidenote-number { counter-increment: sidenote-counter; position: relative; } /* 给每个sidenote添加#符号 */ .sidenote::before { content: \u0026#34;# \u0026#34;; position: relative; font-size: 0.9em; font-weight: 700; color: red; /* 默认红色 */ transition: all 0.3s ease; /* 增加过渡效果 */ } /* 给sidenote-number添加后缀# */ .sidenote-number::after { content: \u0026#34;#\u0026#34;; vertical-align: super; font-size: 0.8em; font-weight: 700; color: #409dff; /* 默认蓝色 */ transition: all 0.3s ease; /* 增加过渡效果 */ } /* 悬停时，数字#和注释的高亮效果 */ .sidenote-number:hover::after { color: red; /* 悬停时改变#符号的颜色 */ } /* 悬停时，增加sidenote的背景和阴影 */ .sidenote-number:hover .sidenote { background-color: var(--sidenote-bg-hover); /* 悬停时背景色变化 */ box-shadow: 0 4px 8px var(--sidenote-shadow2); /* 强化阴影效果 */ } 同时，对于shortcode也有相应的修改，在layouts/shortcodes/sidenote.html中添加以下内容：\nlayouts/shortcodes/sidenote.htm 1 lines \u0026lt;span class=\u0026#34;sidenote-number\u0026#34;\u0026gt;\u0026lt;small class=\u0026#34;sidenote\u0026#34;\u0026gt;{{ .Inner | markdownify }}\u0026lt;/small\u0026gt;\u0026lt;/span\u0026gt; 这是示例 这是示例的侧边注解 盘古之白 「盤古之白」↗ 一文中讨论到，所有的中文字和半形的英文、數字、符號之間应该存在的空白，被漢學家稱為「盤古之白」，因為它劈開了全形字和半形字之間的混沌。\n我们需要在layouts/partials/extend_footer.html中加入：\nlayouts/partials/extend_footer.html 18 lines {{- $highlight := resources.Get \u0026#34;js/pangu.min.js\u0026#34; -}} \u0026lt;script\u0026gt; (function (u, c) { var d = document, t = \u0026#34;script\u0026#34;, o = d.createElement(t), s = d.getElementsByTagName(t)[0]; o.src = u; if (c) { o.addEventListener(\u0026#34;load\u0026#34;, function (e) { c(e); }); } s.parentNode.insertBefore(o, s); })(\u0026#34;{{ $highlight.RelPermalink }}\u0026#34;, function () { pangu.spacingPage(); }); \u0026lt;/script\u0026gt; 同时，需要创建assets/js/pangu.min.js，网站加载时，盘古之白自动加载，大家可以从此处下载。\nBlockquote 参考于： Hugo PaperMod 主题精装修↗ 为什么要演奏春日影！\n在 layouts/shortcodes/quote.html 加入以下内容： layouts/shortcodes/quote.html 8 lines \u0026lt;blockquote class=\u0026#34;quote{{ range .Params }} {{ . }}{{ end }}\u0026#34;\u0026gt; {{- $content := .Inner | markdownify -}} {{- if not (strings.HasPrefix $content \u0026#34;\u0026lt;p\u0026gt;\u0026#34;) -}} {{ printf \u0026#34;\u0026lt;p\u0026gt;%s\u0026lt;/p\u0026gt;\u0026#34; $content | safeHTML }} {{- else -}} {{ $content }} {{- end -}} \u0026lt;/blockquote\u0026gt; 我们在assets/css/extended/quote.css中加入以下内容：\nassets/css/extended/quote.css 32 lines blockquote.quote { position: relative; margin: 1em auto; padding-left: 3em; border: none; } blockquote.quote::before { position: absolute; left: 0; content: \u0026#34;“\u0026#34;; font-size: 3em; font-weight: bold; line-height: 1; } blockquote.quote-copyright { position: relative; margin: 2em auto; padding-left: 3em; border: none; background-color: aliceblue; } blockquote.quote-copyright::before { position: absolute; left: 0; content: \u0026#34;“\u0026#34;; font-size: 3em; font-weight: bold; line-height: 1; } Admonition Warning 注意查看博客修改时间，博客内容可能过时！ 在博客中往往需要我们在一些地方给予读者额外需要注意的信息，这时候我们可以使用Admonition。我们需要添加一个支持Admonition（类似提示、警告、注意等区块）的 Shortcode:\nlayouts/shortcodes/admonition.html 26 lines {{- $type := .Get \u0026#34;type\u0026#34; | default \u0026#34;note\u0026#34; -}} {{- $title := .Get \u0026#34;title\u0026#34; | default (humanize $type) -}} {{- $icon := .Get \u0026#34;icon\u0026#34; -}} {{- $collapsible := .Get \u0026#34;collapsible\u0026#34; | default false -}} {{/* 默认图标映射（可自定义） */}} {{- $defaultIcons := dict \u0026#34;note\u0026#34; \u0026#34;fas fa-info-circle\u0026#34; \u0026#34;tip\u0026#34; \u0026#34;fas fa-lightbulb\u0026#34; \u0026#34;warning\u0026#34; \u0026#34;fas fa-exclamation-triangle\u0026#34; \u0026#34;danger\u0026#34; \u0026#34;fas fa-skull-crossbones\u0026#34; -}} {{- if not $icon -}} {{- $icon = index $defaultIcons $type -}} {{- end -}} \u0026lt;div class=\u0026#34;admonition {{ $type }} {{ if $collapsible }}collapsible{{ end }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;admonition-header\u0026#34;\u0026gt; {{ if $icon }}\u0026lt;i class=\u0026#34;{{ $icon }}\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ end }} \u0026lt;span\u0026gt;{{ $title }}\u0026lt;/span\u0026gt; {{ if $collapsible }}\u0026lt;i class=\u0026#34;toggle-icon fas fa-chevron-down\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ end }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;admonition-content\u0026#34;\u0026gt; {{ .Inner | markdownify }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 同时，我们可以在为其添加css样式：\nassets/extended/admonition.css 75 lines /* 基础变量 */ :root { --admonition-border-width: 4px; --admonition-radius: 8px; --admonition-shadow: 0 3px 10px rgba(0,0,0,0.05); --transition-speed: 0.3s; } .admonition { margin: 2rem 0; border-left: var(--admonition-border-width) solid; border-radius: var(--admonition-radius); background: white; box-shadow: var(--admonition-shadow); transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease; } /* 悬停动画 */ .admonition:hover { transform: translateY(-2px); box-shadow: 0 6px 15px rgba(0,0,0,0.1); } /* 头部样式 */ .admonition-header { display: flex; align-items: center; gap: 0.8rem; padding: 0.8rem 1.2rem 0.8rem 1.2rem; font-size: 1.2rem; /* 标题字体大小 */ font-weight: 600; border-radius: var(--admonition-radius) var(--admonition-radius) 0 0; } /* 内容区域 */ .admonition-content { font-size: 1rem; /* 内容区域字体大小 */ font-weight: normal; padding: 0rem 1.2rem 0.8rem 1.2rem; line-height: 1.6; color: rgba(0,0,0,0.8); } /* 类型配色（更柔和的现代色） */ .admonition.note { border-color: #4A90E2; background: linear-gradient(to right, #f8fcff 1%, white 10%); } .admonition.tip { border-color: #00C781; background: linear-gradient(to right, #f2fff9 1%, white 10%); } .admonition.warning { border-color: #FFB800; background: linear-gradient(to right, #fff9e6 1%, white 10%); } .admonition.danger { border-color: #FF4757; background: linear-gradient(to right, #fff6f5 1%, white 10%); } /* 折叠功能 */ .admonition.collapsible .admonition-content { display: none; } .admonition.collapsible.active .admonition-content { display: block; } .admonition.collapsible .toggle-icon { margin-left: auto; transition: transform var(--transition-speed) ease; } .admonition.collapsible.active .toggle-icon { transform: rotate(180deg); } 为了添加折叠功能，我们需要为其添加JS文件：\nassets/js/admonition.js 6 lines document.querySelectorAll(\u0026#39;.admonition.collapsible\u0026#39;).forEach(admonition =\u0026gt; { const header = admonition.querySelector(\u0026#39;.admonition-header\u0026#39;); header.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { admonition.classList.toggle(\u0026#39;active\u0026#39;); }); }); 由于我们使用了 Fonts Awesome↗ 作为我们的图标支持，还需要导入Fonts Awesome的样式文件，我们这边选择CDN导入。并且在同一文件中导入折叠的JS：\nlayouts/_default/baseof.html 35 lines {{- if lt hugo.Version \u0026#34;0.125.7\u0026#34; }} {{- errorf \u0026#34;=\u0026gt; hugo v0.125.7 or greater is required for hugo-PaperMod to build \u0026#34; }} {{- end -}} \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ site.Language }}\u0026#34; dir=\u0026#34;{{ .Language.LanguageDirection | default \u0026#34;auto\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ \u0026#34;an-old-hope.min.css\u0026#34; | relURL }}\u0026#34;\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . }} + \u0026lt;!-- 添加 Font Awesome CDN 链接 --\u0026gt; + \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34; {{- if (or (ne .Kind `page` ) (eq .Layout `archives`) (eq .Layout `search`)) -}} {{- print \u0026#34;list\u0026#34; -}} {{- end -}} {{- if eq site.Params.defaultTheme `dark` -}} {{- print \u0026#34; dark\u0026#34; }} {{- end -}} \u0026#34; id=\u0026#34;top\u0026#34;\u0026gt; {{- partialCached \u0026#34;header.html\u0026#34; . .Page -}} \u0026lt;main class=\u0026#34;main\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/main\u0026gt; {{ partialCached \u0026#34;footer.html\u0026#34; . .Layout .Kind (.Param \u0026#34;hideFooter\u0026#34;) (.Param \u0026#34;ShowCodeCopyButtons\u0026#34;) -}} \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;hljs.highlightAll();\u0026lt;/script\u0026gt; +\u0026lt;!-- admonition --\u0026gt; +{{ $js := resources.Get \u0026#34;js/admonition.js\u0026#34; | minify | fingerprint }} +\u0026lt;script src=\u0026#34;{{ $js.RelPermalink }}\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 友链 友链也是博客中不得不品的一个环节，我在这里参考的是 sulv-hugo-papermod|xyming108↗ ，当鼠标浮动到友链所在的位置，头像就会开始旋转并放大。首先，创建一个friend的shortcode： layouts/shortcodes/friends.html 13 lines {{- if .IsNamedParams -}} \u0026lt;a target=\u0026#34;_blank\u0026#34; href={{ .Get \u0026#34;url\u0026#34; }} title={{ .Get \u0026#34;name\u0026#34; }} class=\u0026#34;friendurl\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddiv\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddivleft\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;myfriend\u0026#34; src={{ .Get \u0026#34;logo\u0026#34; }} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frienddivright\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friendname\u0026#34;\u0026gt;{{- .Get \u0026#34;name\u0026#34; -}}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friendinfo\u0026#34;\u0026gt;{{- .Get \u0026#34;word\u0026#34; -}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; {{- end }} 这边参考的是 旋转的友链|Yunpeng Tai↗ ，我们需要添加对应的css来美化一下。\nassets/css/extended/friends.css 99 lines .friendurl { text-decoration: none !important; color: black; box-shadow: none !important; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50% !important; padding: 2px; margin-top: 20px !important; margin-left: 14px !important; background-color: #fff; } .frienddiv { overflow: auto; height: 100px; width: 49%; display: inline-block !important; border-radius: 5px; background: none; -webkit-transition: all ease-out 0.3s; -moz-transition: all ease-out 0.3s; -o-transition: all ease-out 0.3s; transition: all ease-out 0.3s; } .dark .frienddiv:hover { background: var(--code-bg); } .frienddiv:hover { background: var(--theme); transition: transform 1s; webkit-transform: scale(1.1); -moz-transform: scale(1.2); -ms-transform: scale(1.2); -o-transform: scale(1.2); transform: scale(1.1); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; margin-right: -5px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; font-size: 100%; margin-bottom: 5px; color: var(--primary); } .friendinfo { text-overflow: ellipsis; font-size: 70%; color: var(--primary); } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 18px; } } 在我们能够使用shortcode来显示友链了，我们还需要创建一个页面来放置我们的友链。\n首先，需要在hugo.yaml中添加以下内容： hugo.yaml 8 lines languages: zh: menu: main: + - identifier: friends + name: \u0026#34;友链\u0026#34; + url: \u0026#34;/friends/\u0026#34; + weight: 4 其次，我们在创建对应位置的friends的导览页内容：\n$ mkdir content/zh/friends/ $ vim content/zh/friends/index.md 在其中添加： content/zh/friends/index.md 11 lines --- title: \u0026#34;友链\u0026#34; layout: \u0026#34;friends\u0026#34; summary: \u0026#34;这是我的友链页面\u0026#34; --- {{\u0026lt;/* friend name=\u0026#34;Downmars\u0026#34; url=\u0026#34;https://downmars.github.io/zh/posts/\u0026#34; logo=\u0026#34;https://raw.githubusercontent.com/Downmars/images-PicGo/main/img/miku.jpg\u0026#34; word=\u0026#34;Enjoy your life!\u0026#34; */\u0026gt;}} 这边的友链格式为：{{\u0026lt; friend name=\u0026quot;downmars\u0026quot; url=\u0026quot;https://downmars.github.io/zh/posts/\u0026quot; logo=\u0026quot;https://raw.githubusercontent.com/downmars/images-picgo/main/img/miku.jpg\u0026quot; word=\u0026quot;enjoy your life!\u0026quot; \u0026gt;}}，上述的/* */是为了能够顺利转义我的shortcode而不被markdown转义为友链。\n接着，我们为这个导览页添加html样式： layouts/_default/friends.html 14 lines {{ define \u0026#34;main\u0026#34; }} \u0026lt;main class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;article class=\u0026#34;friend-container\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ with .Params.summary }}\u0026lt;p class=\u0026#34;summary\u0026#34;\u0026gt;{{ . }}\u0026lt;/p\u0026gt;{{ end }} \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;friend-grid\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/section\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 这样我们应该就可以在页面的对应位置看到我们的友链链接了。\nMermaid 大家如果有一些复杂的关系图，需要一些示意图、流程图的地方，那么Mermaid可能会是你需要的。我们能够以代码的格式书写我们的Mermaid图，这能够帮我们以纯文本的方式保存我们的文件内容，这对于内容的传播性、开放性和可读性都有很好的诠释。这里的创建方法参照了 Mermaid图|Yunpeng Tai↗ 。\nlayouts/_default/_markup/render-codeblock-mermaid.html 5 lines \u0026lt;!-- 因为正常写会有 ```meraid ... ``` --\u0026gt; \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | htmlEscape | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} layouts/partials/mermaid.html 66 lines {{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const elementCode = \u0026#34;.mermaid\u0026#34;; const loadMermaid = function (theme) { mermaid.initialize({ theme }); mermaid.init({ theme, themeVariables: { // 这里设置字体跟正文一致 fontFamily: [\u0026#34;SFProText-Regular\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;] }}, document.querySelectorAll(elementCode)); }; const saveOriginalData = function () { return new Promise((resolve, reject) =\u0026gt; { try { var els = document.querySelectorAll(elementCode), count = els.length; els.forEach((element) =\u0026gt; { element.setAttribute(\u0026#34;data-original-code\u0026#34;, element.innerHTML); count--; if (count == 0) { resolve(); } }); } catch (error) { reject(error); } }); }; const resetProcessed = function () { return new Promise((resolve, reject) =\u0026gt; { try { var els = document.querySelectorAll(elementCode), count = els.length; els.forEach((element) =\u0026gt; { if (element.getAttribute(\u0026#34;data-original-code\u0026#34;) != null) { element.removeAttribute(\u0026#34;data-processed\u0026#34;); element.innerHTML = element.getAttribute(\u0026#34;data-original-code\u0026#34;); } count--; if (count == 0) { resolve(); } }); } catch (error) { reject(error); } }); }; saveOriginalData().catch(console.error); // 不要用 localStorage.getItem(\u0026#34;pref-theme\u0026#34;)，因为有些时候会为 null let isdark = document.body.className.includes(\u0026#34;dark\u0026#34;); if (isdark) { resetProcessed().then(loadMermaid(\u0026#34;dark\u0026#34;)).catch(console.error); } else { resetProcessed().then(loadMermaid(\u0026#34;neutral\u0026#34;)).catch(console.error); } document.getElementById(\u0026#34;theme-toggle\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { resetProcessed(); document.body.className.includes(\u0026#34;dark\u0026#34;) ? loadMermaid(\u0026#34;neutral\u0026#34;) : loadMermaid(\u0026#34;dark\u0026#34;).catch(console.error); }); \u0026lt;/script\u0026gt; {{ end }} layouts/_default/single.html 4 lines \u0026lt;article\u0026gt; \u0026lt;!-- 省略上面的 --\u0026gt; + {{- partial \u0026#34;mermaid.html\u0026#34; . }} \u0026lt;/article\u0026gt; Shortcodes大赏 hugo采用markdown的格式进行内容创作，但是当我们需要一些特殊功能的时候，markdown并不能满足我们的需求。我们在这个时候可能需要插入一些html代码，这对于整个markdown的格式与可读性都是很糟糕的。幸运的是，hugo给我们提供了简码(Shortcodes)功能，在我们准备好对应的简码模板与简码，这能够在使用简码的时候，将hugo自动转换为html语言，我们就能够使用很简码的样式来实现需要的特殊功能。\n关于Shortcodes的相关知识可以参考 Shortcodes templates↗ ，大家可以自行前往查看。\n图像放大 {{\u0026lt; figure src=\u0026quot;/path/to/image.jpg\u0026quot; alt=\u0026quot;A beautiful image\u0026quot; title=\u0026quot;Image\u0026quot; caption=\u0026quot;This is a caption for the image\u0026quot; align=\u0026quot;center\u0026quot; width=600px height=300px \u0026gt;}}\nSonny_boyThis is a caption for the image\n自动折叠代码 {{\u0026lt; collapse summary=\u0026quot;test\u0026quot; \u0026gt;}} {代码段} {{\u0026lt; /collapse \u0026gt;}}\ntest 1 lines test 侧边注解 这是示例 {{\u0026lt; sidenote \u0026gt;}} 这是示例的侧边注解 {{\u0026lt; /sidenote \u0026gt;}}\n这是示例 这是示例的侧边注解aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 引用 {{\u0026lt; quote \u0026gt;}} {引用段} {{\u0026lt; /quote \u0026gt;}}\n为什么要演奏春日影！\n转义渲染 参考于： 如何在代码块里内嵌 HUGO 的简码 (SHORTCODES) | 消夏錄↗ ，由于Shortcodes代码会被hugo直接转义为对应的功能，所以我们需要将Shortcodes的括号内加入/* */防止转义。我们需要在markdown中输入：\n{{\u0026lt;/* myshortcode */\u0026gt;}} 渲染结果：\n{{\u0026lt; myshortcode \u0026gt;}} Asciinema {{\u0026lt; asciinema ID \u0026gt;}}\nAdmonition {{\u0026lt; admonition type=\u0026ldquo;danger\u0026rdquo; title=\u0026ldquo;严重警告！\u0026rdquo; collapsible=\u0026ldquo;true\u0026rdquo; \u0026gt;}}\n可折叠的警告区块，点击头部展开/收起\n支持 Markdown 和自动图标⚡\n{{\u0026lt; /admonition \u0026gt;}}\nNote 这是一个记录。 Tip 这是一个提示! Warning 警告警告⚠️ 严重警告！ 可折叠的警告区块，点击头部展开/收起\n支持 Markdown 和自动图标⚡ Mermaid 我在这边单开了一篇关于Mermaid的内容，可以参考此内容： Mermaid使用例 总结 关于hugo的配置暂时就告一段落了，之后可能会有所增减，希望能帮助到大家。\u0026#x1f604;\n","permalink":"https://downmars.github.io/zh/posts/2025_01_20-hugo_build_2/","summary":"\u003cblockquote class=\"quote\"\u003e\u003cp\u003e如何构建我的hugo博客-这是一个系列\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../2025_01_19-hugo_build_1\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_基础 😊\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\".\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_配置 🚀\u003c/a\u003e\n\u0026#x1f448; 你在这里\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../2025_02_05-hugo_build_3\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_主题优化 🤤\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在上一篇文章“\u003ca href=\"../2025_01_19-hugo_build_1\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_基础 😊\u003c/a\u003e\n”中，我们讲解了如何搭建一个Hugo博客，这一篇文章将会讲解如何配置Hugo博客。\u003c/p\u003e","title":"Hugo博客搭建_配置 🚀"},{"content":"如何构建我的hugo博客-这是一个系列\nHugo博客搭建_基础 😊 \u0026#x1f448; 你在这里 Hugo博客搭建_配置 🚀 Hugo博客搭建_主题优化 🤤 前言 以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\n安装环境 我最近也在将日常的工作娱乐环境转向linux，所以说选择了archlinux作为我的安装环境，之后应该会出一系列我的archlinux的配置。\n本文涉及环境以及工具的网站：\nHugo↗ Github↗ Hugo安装及基础配置 Hugo安装 我是用的是archlinux，所以直接用pacman安装：\n$ sudo pacman -S hugo 安装完之后，可以通过以下命令查看版本：\n$ hugo version Hugo初始化 通过上述命令安装hugo程序后，可以在选定的目录下通过hugo new site $YOUR_SITE_NAME创建你的博客目录：\n如果不特殊申明，本文接下来的命令行操作都是在$YOUR_SITE_NAME目录下进行的。\n$ hugo new site DHugo Congratulations! Your new Hugo site was created in /home/dm/Test/DHugo. Just a few more steps... 1. Change the current directory to /home/dm/Test/DHugo. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 可以使用tree指令对我们创建的博客目录进行查看\n$ tree . ├── archetypes │ └── default.md # 博客模板文件 ├── assets # 存放静态资源文件 ├── content # 存放博客文章 ├── data # 存放数据文件 ├── hugo.toml # 博客配置文件，可以修改为hugo.yaml，支持JSON、YAML、TOML三种不同配置文件 ├── i18n # 多语言配置 ├── layouts # 存放布局配置文件 ├── static # 存放静态资源文件，图片、css、js等 └── themes # 存放不同主题 9 directories, 2 files 配置主题 我们在此处的主题选择 PaperMod↗ ，这是一个Star比较高的主题，简约的并且功能较为丰富。当然，你也可以自己选择主题：\n官方的主题网址： https://themes.gohugo.io/↗ 在此处，官方推荐将我们选择的主题fork一个到自己的账户，并使用git submodule进行仓库的链接，这样以便后续主题的单独维护，避免当自己对主题进行修改之后，后续版本管理和更新会与原先主题产生冲突。\n当然了，我并没有fork一个主题并进行修改，我们通常是将themes/$THEME/对应目录下的文件拷贝一份到我们的项目目录$YOUR_SITE_NAME中对应的文件夹下，相对目录需要相同，以便我们复制的文件可以覆盖他的默认配置。\n$ git init $ git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 之后在hugo.yaml中添加新的一行启用新主题，同时为了后续的部署到Github我们需要在config.yaml中添加baseURL配置：\nhugo.yaml 2 lines theme: \u0026#34;PaperMod\u0026#34; baseURL: \u0026#34;https://downmars.github.io“ 新建博客 我们可以使用hugo new path/to/your.md来创建你的第一个博客啦！\n$ hugo new posts/test.md posts/test.md 5 lines --- title: \u0026#34;Test\u0026#34; date: 2022-10-21T19:00:43+08:00 draft: true --- 这个命令会在content目录下创建posts目录，并在生成posts/test.md，博文使用Markdown语法完成，我们用默认模板生成的博客是草稿状态，可以将draft设置为false，这样文章就可以发表了。\n我们接下来就可以使用hugo server进行本地预览了，通过访问 http://localhost:1313/↗ 可以在本地预览我们创建的博客了。\n$ hugo server --disableFastRender 但是我们现在只能够本地预览，如果想要发布到Github Pages，还需要借助Action来完成。\nGithub Action自动化部署 Github Pages 本质上是一个静态网站托管系统，你可以使用它为你的每一个仓库制作一个静态网页入口，我可以借助Action来完成部署界面。\n创建Github仓库 Your respository/New/Create a new repository 创建Github仓库 此处Repository name一定得是[你的github账号名].github.io，如Downmars.github.io，然后[Create Repository]即可。 创建ci.yml文件 Github进行自动化部署需要一个ci.yml文件，位于.github/workflows/ci.yaml，步骤如下：\n$ mkdir .github/workflows $ touch .github/workflows/ci.yml .github/workflows/ci.yml 32 lines name: Deploy Hugo site on: push: branches: - main workflow_dispatch: permissions: # 添加这个权限配置 contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} # 使用默认令牌 publish_dir: ./public 使用gh-pages部署网页 $ git remote add origin https://github.com/jianzhnie/jianzhnie.github.io.git # 将本地目录链接到远程服务器的代码仓库 $ git add . $ git commit -m \u0026#34;WOW！\u0026#34; $ git push origin main 此时，我们的博客就已经部署到了Github Pages上了，可以通过https://[你的github账号名].github.io来访问你的博客了。\n我一开始创建的时候会在我的博客网址看不见我的网页，后来查询之后得知需要在Downmars.github.io/Settings/pages/Branch 将分支切换为gh-pages即可\n","permalink":"https://downmars.github.io/zh/posts/2025_01_19-hugo_build_1/","summary":"\u003cblockquote class=\"quote\"\u003e\u003cp\u003e如何构建我的hugo博客-这是一个系列\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\".\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_基础 😊\u003c/a\u003e\n\u0026#x1f448; 你在这里\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../2025_01_20_hugo_build_2\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_配置 🚀\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../2025_02_05-hugo_build_3\"\n   \n   \n   class=\"custom-link\"\u003e  \n   Hugo博客搭建_主题优化 🤤\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\u003c/p\u003e","title":"Hugo博客搭建_基础 😊"},{"content":" Downmars Enjoy your life! 乱话三千 养了一只叫基金的可爱小猫,平时会写点技术向的东西,有点做饭的小爱好 欢迎大家来访，欢迎互换友链！ 有需要互换友链的可以参考此处，可以在评论区留下你的友链：\nname=\u0026ldquo;Downmars\u0026rdquo;\nurl=\u0026ldquo; https://downmars.github.io/zh/posts/\"↗ logo=\u0026ldquo; https://raw.githubusercontent.com/Downmars/images-PicGo/main/img/miku.jpg\"↗ word=\u0026ldquo;Enjoy your life!\u0026rdquo;\n","permalink":"https://downmars.github.io/zh/friends/","summary":"这是我的友链页面","title":"友链"}]