[{"content":"前言 在上一篇文章“ Hugo博客搭建_基础 😊 ”中，我们讲解了如何搭建一个Hugo博客，这一篇文章将会讲解如何配置Hugo博客。\n基础配置文件 我们曾经在hugo.yaml中配置本博客的一些功能，我们将会在这一部分补充和讨论剩余的配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 # Basic Configuration (基础配置) baseURL: \u0026#34;\u0026#34; # Site URL (网站 URL)(e.g. https://downmars.github.io/) title: \u0026#34;\u0026#34; # Site title (网站标题)(e.g. DLog) theme: \u0026#34;\u0026#34; # Theme name (主题名称)(e.g. PaperMod, in /themes/) # Feature Toggles (功能开关) enableEmoji: true # Enable emoji support (启用表情支持)(e.g. https://gohugo.io/quick-reference/emojis/#smileys--emotion) enableRobotsTXT: true # Enable search engine support (启用搜索引擎支持) hasCJKLanguage: true # Enable CJK language support (启用中日韩语言支持) buildDrafts: false # Build draft posts (是否构建草稿文章) buildFuture: false # Build future posts (是否构建未来日期文章) buildExpired: false # Build expired posts (是否构建过期文章) # Parameters Configuration (参数配置) params: # Theme Settings (主题设置) defaultTheme: dark # Default theme mode (默认主题模式) disableThemeToggle: false # Allow theme switching (允许主题切换) # Display Features (显示功能) ShowShareButtons: true # Show social share buttons (显示分享按钮) ShowCodeCopyButtons: true # Show code copy buttons (显示代码复制按钮) ShowReadingTime: true # Show reading time estimate (显示阅读时间) ShowWordCount: true # Show word count (显示字数统计) ShowPostNavLinks: true # Show post navigation (显示文章导航) ShowBreadCrumbs: true # Show breadcrumb navigation (显示面包屑导航) ShowToc: true # Show table of contents (显示目录) TocOpen: true # TOC expanded by default (目录默认展开) # Comment System (评论系统) comments: true # Enable comments (启用评论) giscus: # Giscus configuration (Giscus 配置) repo: \u0026#34;\u0026#34; repoId: \u0026#34;\u0026#34; category: \u0026#34;\u0026#34; categoryId: \u0026#34;\u0026#34; mapping: \u0026#34;pathname\u0026#34; strict: \u0026#34;0\u0026#34; reactionsEnabled: \u0026#34;1\u0026#34; emitMetadata: \u0026#34;0\u0026#34; inputPosition: \u0026#34;bottom\u0026#34; lightTheme: \u0026#34;light\u0026#34; darkTheme: \u0026#34;dark\u0026#34; lang: \u0026#34;zh-CN\u0026#34; crossorigin: \u0026#34;anonymous\u0026#34; # Assets Files (资源文件) assets: favicon: \u0026#34;\u0026#34; # Site favicon (网站图标) favicon16x16: \u0026#34;\u0026#34; # Small favicon (小图标) favicon32x32: \u0026#34;\u0026#34; # Medium favicon (中图标) apple_touch_icon: \u0026#34;\u0026#34; # iOS icon (iOS 图标) safari_pinned_tab: \u0026#34;\u0026#34; # Safari icon (Safari 图标) # Multilingual Support (多语言支持) languages: zh: languageCode: \u0026#34;zh-CN\u0026#34; languageName: \u0026#34;简体中文\u0026#34; contentDir: \u0026#34;content/zh\u0026#34; weight: 1 menu: main: - identifier: posts name: \u0026#34;Posts\u0026#34; url: \u0026#34;/posts/\u0026#34; weight: 1 # Output Settings (输出设置) outputs: home: - HTML - RSS - JSON # Required for search (搜索功能需要) # Rendering Configuration (渲染配置) markup: goldmark: renderer: unsafe: true # Allow HTML in markdown (允许 Markdown 中的 HTML) highlight: codeFences: true # Enable code highlighting (启用代码高亮) guessSyntax: true # Guess code language (猜测代码语言) lineNos: true # Show line numbers (显示行号) style: dracula # Code highlight theme (代码高亮主题) 基础配置 功能开关 表情支持 通过启用此功能，我们能够从 Github Emoji API 和 Unicode 完整表情符号列表中读取数据。博主显出极高兴的样子，将两个指头的敲着键盘，点头说，“对呀对呀！……表情有两样写法，你知道么？”\nShortcode: :drooling_face:\u0026#x1f924;\nUnicode: \u0026amp;#x1F924🤤\n关于对应的表情和文档可以查询：\nshortcode↗ Unicode↗ 参数配置 目录配置 对于自带的目录，只显示在文章最上面，既不能让读者随时掌握到阅读进度，也不够优雅，所以我在参考了 在PaperMod中引入侧边目录和阅读进度显示↗ 基础上做了一些改动\n自动编号 当前浏览章节下划线显示 创建 layout/partials/toc.htmlu0026lt;!-- 目录侧边栏 --\u0026gt; {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; let headerCounters = {}; // 重置所有计数器 function resetHeaderCounters() { headerCounters = {}; } // 获取标题的自动编号 function getHeaderNumber(element, headerLevel) { // 获取之前的所有标题元素 let prevElements = Array.from(document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;)); let currentIndex = prevElements.indexOf(element); let numbers = []; // 重置当前级别之后的计数器 Object.keys(headerCounters).forEach(level =\u0026gt; { if (parseInt(level) \u0026gt; headerLevel) { delete headerCounters[headerLevel]; } }); // 遍历到当前元素为止的所有标题 for (let i = 0; i \u0026lt;= currentIndex; i++) { let currentElement = prevElements[i]; let currentLevel = parseInt(currentElement.tagName.substring(1)); if (currentLevel \u0026lt;= headerLevel) { // 更新计数器 if (!headerCounters[currentLevel]) { headerCounters[currentLevel] = 1; } else if (currentElement === element) { headerCounters[currentLevel]++; } // 构建当前层级的编号 if (currentElement === element) { for (let level = 1; level \u0026lt;= currentLevel; level++) { if (headerCounters[level]) { numbers.push(headerCounters[level]); } } } } } return numbers.join(\u0026#39;.\u0026#39;); } // 更新目录项的显示 function updateTocDisplay(element, tocLink) { const headerLevel = parseInt(element.tagName.substring(1)); const currentNumber = getHeaderNumber(element, headerLevel); // 移除之前可能存在的编号 let linkText = tocLink.textContent; linkText = linkText.replace(/^\\d+(\\.\\d+)*\\s+/, \u0026#39;\u0026#39;); // 添加新的编号 tocLink.textContent = `${currentNumber} ${linkText}`; } // 获取元素的顶部偏移 function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } // 检查TOC位置 function checkTocPosition() { const width = document.body.scrollWidth; const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } // 初始化时的处理 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); if (elements.length \u0026gt; 0) { // 设置第一个标题为活动状态 activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } // 初始化所有标题的编号 if (elements \u0026amp;\u0026amp; elements.length \u0026gt; 0) { elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); const tocLink = document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`); if (tocLink) { updateTocDisplay(element, tocLink); } }); } // 添加返回顶部链接的事件监听 const topLink = document.getElementById(\u0026#39;top-link\u0026#39;); if (topLink) { topLink.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { event.preventDefault(); window.scrollTo({ top: 0, behavior: \u0026#39;smooth\u0026#39; }); }); } }, false); // 窗口大小改变时的处理 window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); // 滚动时的处理 window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { const scrollPosition = window.pageYOffset || document.documentElement.scrollTop; if (scrollPosition === 0) { return; } if (elements \u0026amp;\u0026amp; elements.length \u0026gt; 0) { // 重置计数器 resetHeaderCounters(); // 查找当前可见的标题 activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - scrollPosition) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - scrollPosition) \u0026lt; window.innerHeight / 2) { return element; } }) || activeElement; // 更新所有目录项的显示 elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); const tocLink = document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`); if (tocLink) { updateTocDisplay(element, tocLink); if (element === activeElement) { tocLink.classList.add(\u0026#39;active\u0026#39;); tocLink.style.textDecoration = \u0026#34;underline\u0026#34;; // 确保当前激活的标题在目录中可见 const tocContainer = document.querySelector(\u0026#39;.toc .inner\u0026#39;); const linkOffsetTop = tocLink.offsetTop; const containerHeight = tocContainer.clientHeight; const linkHeight = tocLink.clientHeight; // 计算滚动位置，将当前目录项居中显示 const scrollPosition = linkOffsetTop - (containerHeight / 2) + (linkHeight / 2); tocContainer.scrollTo({ top: scrollPosition, behavior: \u0026#39;smooth\u0026#39; }); } else { tocLink.classList.remove(\u0026#39;active\u0026#39;); tocLink.style.textDecoration = \u0026#34;none\u0026#34;; } } }); } }, false); \u0026lt;/script\u0026gt; {{- end }} 创建assets/css/extended/toc.css，根据阅读内容滚动并加粗相应标题就由其实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 /*目录侧边栏*/ :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } /*目录侧边栏*/ 评论支持 对于评论支持，我选择了 Giscus↗ 。由于本博客也是部署在Github上，在减少额外操作的同时 Giscus 也显得足够的优雅简单。\n此处操作参考了 Hugo 博客引入 Giscus 评论系统↗ 。\nGiscus↗ -\u0026gt; 进入配置栏 配置 -\u0026gt; 仓库 -\u0026gt; 填入仓库名，如 Downmars/Downmars.github.io↗ -\u0026gt; 若不满足条件，分别查看：对应仓库是否公开、giscus app 是否安装、 Discussions 功能在对应仓库是否启用 配置 -\u0026gt; Discussions 分类 -\u0026gt; 选中Announcements 配置 -\u0026gt; 启用giscus -\u0026gt; 复制相应字段到配置中 同时需要创建 layouts/partials/comments.html，此处参考了 Hugo + PaperMod + Github Pages 搭建一个完善的个人博客(以 Windows11 为例)↗ 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 {{- /* Comments area start */ -}} {{- /* to add comments read =\u0026gt; https://gohugo.io/content-management/comments/ */ -}} \u0026lt;div id=\u0026#34;tw-comment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 默认是暗色，根目录下的配置中的主题默认也是暗色 const getStoredTheme = () =\u0026gt; localStorage.getItem(\u0026#34;pref-theme\u0026#34;) === \u0026#34;light\u0026#34; ? \u0026#34;{{ .Site.Params.giscus.lightTheme }}\u0026#34; : \u0026#34;{{ .Site.Params.giscus.darkTheme }}\u0026#34;; const setGiscusTheme = () =\u0026gt; { const sendMessage = (message) =\u0026gt; { const iframe = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (iframe) { iframe.contentWindow.postMessage({giscus: message}, \u0026#39;https://giscus.app\u0026#39;); } } sendMessage({setConfig: {theme: getStoredTheme()}}) } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const giscusAttributes = { \u0026#34;src\u0026#34;: \u0026#34;https://giscus.app/client.js\u0026#34;, \u0026#34;data-repo\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repo }}\u0026#34;, \u0026#34;data-repo-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repoId }}\u0026#34;, \u0026#34;data-category\u0026#34;: \u0026#34;{{ .Site.Params.giscus.category }}\u0026#34;, \u0026#34;data-category-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.categoryId }}\u0026#34;, \u0026#34;data-mapping\u0026#34;: \u0026#34;{{ .Site.Params.giscus.mapping }}\u0026#34;, \u0026#34;data-strict\u0026#34;: \u0026#34;{{ .Site.Params.giscus.strict }}\u0026#34;, \u0026#34;data-reactions-enabled\u0026#34;: \u0026#34;{{ .Site.Params.giscus.reactionsEnabled }}\u0026#34;, \u0026#34;data-emit-metadata\u0026#34;: \u0026#34;{{ .Site.Params.giscus.emitMetadata }}\u0026#34;, \u0026#34;data-input-position\u0026#34;: \u0026#34;{{ .Site.Params.giscus.inputPosition }}\u0026#34;, \u0026#34;data-theme\u0026#34;: getStoredTheme(), \u0026#34;data-lang\u0026#34;: \u0026#34;{{ .Site.Params.giscus.lang }}\u0026#34;, \u0026#34;data-loading\u0026#34;: \u0026#34;lazy\u0026#34;, \u0026#34;crossorigin\u0026#34;: \u0026#34;anonymous\u0026#34;, }; // 动态创建 giscus script const giscusScript = document.createElement(\u0026#34;script\u0026#34;); Object.entries(giscusAttributes).forEach( ([key, value]) =\u0026gt; giscusScript.setAttribute(key, value)); document.querySelector(\u0026#34;#tw-comment\u0026#34;).appendChild(giscusScript); // 页面主题变更后，变更 giscus 主题 const themeSwitcher = document.querySelector(\u0026#34;#theme-toggle\u0026#34;); if (themeSwitcher) { themeSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } const themeFloatSwitcher = document.querySelector(\u0026#34;#theme-toggle-float\u0026#34;); if (themeFloatSwitcher) { themeFloatSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } }); \u0026lt;/script\u0026gt; {{- /* Comments area end */ -}} 网站图标 咱们一个自己的博客肯定得需要有自己的一个网站图标，可以将图标放在/static/images/，如favicon: \u0026quot;/images/blog.png\u0026quot;。我在这里推荐两个网站供大家用来查找符合自己图标。\nfontawesome↗ flaticon↗ icons8↗ iconfinder↗ Noun Project↗ 多语言 \u0026amp; 界面布置 这部分参考来自于 Hugo 多语言博客搭建，如何优雅地管理多语言 md 内容-贤民↗ 。\n我认为对于编写博客的我们来说，以时间的形式来分隔是很好的一种方式来存储以及管理我们的博客，使用统一文件命名规范YYYYMMDD-title.md。此外，有兴趣的可以做一下多语言的准备，即使现在没有推出多语言的打算，之后可以集中找个时间来使用ai工具来统一做一下。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . ├── en │ ├── archives │ │ └── archives.md │ ├── posts │ │ └── 2025_01_19-hugo_build_1.md │ └── search │ └── search.md └── zh ├── archives │ └── archives.md ├── posts │ ├── 2025_01_19-hugo_build_1.md │ └── 2025_01_20-hugo_build_2.md └── search └── search.md 可以参考我的示例结构，在这里我将zh/和en/作为post/的直接子目录，这一步需在对应的语言下添加设置对应的文档目录，如contentDir: \u0026quot;content/zh\u0026quot;。\n我们在此处同时需要设置页面布局，创建zh/archives/archives.md和zh/search/search.md，\n1 2 3 4 5 --- title: \u0026#34;时间轴\u0026#34; layout: \u0026#34;archives\u0026#34; summary: archives --- 1 2 3 4 5 --- title: \u0026#34;搜索\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary summary: \u0026#34;search\u0026#34; --- 同时，搜索需要额外加入如下配置：\n1 2 3 4 5 outputs: home: - HTML - RSS - JSON # Required for search (搜索功能需要) 接着，我们在配置文件中加入时间轴与搜索的布局即可：\n1 2 3 4 5 6 7 8 9 10 11 12 13 # Multilingual Support (多语言支持) languages: zh: languageCode: \u0026#34;zh-CN\u0026#34; languageName: \u0026#34;简体中文\u0026#34; contentDir: \u0026#34;content/zh\u0026#34; weight: 1 menu: main: - identifier: posts name: \u0026#34;Posts\u0026#34; url: \u0026#34;/posts/\u0026#34; weight: 1 ","permalink":"https://downmars.github.io/zh/posts/2025_01_20-hugo_build_2/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e在上一篇文章“\u003ca href=\"../hugo_build_1\" \n   \n   \u003e\n   Hugo博客搭建_基础 😊\u003c/a\u003e\n\n\n\n\n”中，我们讲解了如何搭建一个Hugo博客，这一篇文章将会讲解如何配置Hugo博客。\u003c/p\u003e\n\u003ch1 id=\"基础配置文件\"\u003e基础配置文件\u003c/h1\u003e\n\u003cp\u003e我们曾经在\u003ccode\u003ehugo.yaml\u003c/code\u003e中配置本博客的一些功能，我们将会在这一部分补充和讨论剩余的配置：\u003c/p\u003e","title":"Hugo博客搭建_配置 🚀"},{"content":" 前言 以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\n安装环境 我最近也在将日常的工作娱乐环境转向linux，所以说选择了archlinux作为我的安装环境，之后应该会出一系列我的archlinux的配置。\n本文涉及环境以及工具的网站：\nHugo↗ Github↗ Hugo安装及基础配置 Hugo安装 我是用的是archlinux，所以直接用pacman安装：\n1 sudo pacman -S hugo 安装完之后，可以通过以下命令查看版本：\n1 hugo version Hugo初始化 通过上述命令安装hugo程序后，可以在选定的目录下通过hugo new site $YOUR_SITE_NAME创建你的博客目录：\n如果不特殊申明，本文接下来的命令行操作都是在$YOUR_SITE_NAME目录下进行的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% hugo new site DHugo Congratulations! Your new Hugo site was created in /home/dm/Test/DHugo. Just a few more steps... 1. Change the current directory to /home/dm/Test/DHugo. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 可以使用tree指令对我们创建的博客目录进行查看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% tree . ├── archetypes │ └── default.md # 博客模板文件 ├── assets # 存放静态资源文件 ├── content # 存放博客文章 ├── data # 存放数据文件 ├── hugo.toml # 博客配置文件，可以修改为hugo.yaml，支持JSON、YAML、TOML三种不同配置文件 ├── i18n # 多语言配置 ├── layouts # 存放布局配置文件 ├── static # 存放静态资源文件，图片、css、js等 └── themes # 存放不同主题 9 directories, 2 files 配置主题 我们在此处的主题选择 PaperMod↗ ，这是一个Star比较高的主题，简约的并且功能较为丰富。当然，你也可以自己选择主题：\n官方的主题网址： https://themes.gohugo.io/↗ 在此处，官方推荐将我们选择的主题fork一个到自己的账户，并使用git submodule进行仓库的链接，这样以便后续主题的单独维护，避免当自己对主题进行修改之后，后续版本管理和更新会与原先主题产生冲突。\n当然了，我并没有fork一个主题并进行修改，我们通常是将themes/$THEME/对应目录下的文件拷贝一份到我们的项目目录$YOUR_SITE_NAME中对应的文件夹下，相对目录需要相同，以便我们复制的文件可以覆盖他的默认配置。\n1 2 git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 之后在hugo.yaml中添加新的一行启用新主题：\n1 theme: \u0026#34;PaperMod\u0026#34; 同时为了后续的部署到Github我们需要在config.toml中添加baseURL配置：\n1 baseURL: \u0026#34;https://downmars.github.io“ 新建博客 我们可以使用hugo new path/to/your.md来创建你的第一个博客啦！\n1 hugo new posts/test.md 1 2 3 4 5 --- title: \u0026#34;Test\u0026#34; date: 2022-10-21T19:00:43+08:00 draft: true --- 这个命令会在content目录下创建posts目录，并在生成posts/test.md，博文使用Markdown语法完成，我们用默认模板生成的博客是草稿状态，可以将draft设置为false，这样文章就可以发表了。\n我们接下来就可以使用hugo server进行本地预览了，通过访问 http://localhost:1313/↗ 可以在本地预览我们创建的博客了。\n1 hugo server --disableFastRender 但是我们现在只能够本地预览，如果想要发布到Github Pages，还需要借助Action来完成。\nGithub Action自动化部署 Github Pages 本质上是一个静态网站托管系统，你可以使用它为你的每一个仓库制作一个静态网页入口，我可以借助Action来完成部署界面。\n创建Github仓库 Your respository/New/Create a new repository 创建Github仓库 此处Repository name一定得是[你的github账号名].github.io，如Downmars.github.io，然后[Create Repository]即可。 创建ci.yml文件 Github进行自动化部署需要一个ci.yml文件，位于.github/workflows/ci.yaml，步骤如下：\n1 2 mkdir .github/workflows touch .github/workflows/ci.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 name: Deploy Hugo site on: push: branches: - main workflow_dispatch: permissions: # 添加这个权限配置 contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} # 使用默认令牌 publish_dir: ./public 使用gh-pages部署网页 1 2 3 4 git remote add origin https://github.com/jianzhnie/jianzhnie.github.io.git # 将本地目录链接到远程服务器的代码仓库 git add . git commit -m \u0026#34;WOW！\u0026#34; git push origin main 此时，我们的博客就已经部署到了Github Pages上了，可以通过https://[你的github账号名].github.io来访问你的博客了。\n我一开始创建的时候会在我的博客网址看不见我的网页，后来查询之后得知需要在Downmars.github.io/Settings/pages/Branch 将分支切换为gh-pages即可\n","permalink":"https://downmars.github.io/zh/posts/2025_01_19-hugo_build_1/","summary":"\u003chr\u003e\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\u003c/p\u003e","title":"Hugo博客搭建_基础 😊"}]