[{"content":" 前言 以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\n安装环境 我最近也在将日常的工作娱乐环境转向linux，所以说选择了archlinux作为我的安装环境，之后应该会出一系列我的archlinux的配置。\n本文涉及环境以及工具的网站：\nHugo Github Hugo安装及基础配置 Hugo安装 我是用的是archlinux，所以直接用pacman安装：\n1 sudo pacman -S hugo 安装完之后，可以通过以下命令查看版本：\n1 hugo version Hugo初始化 通过上述命令安装hugo程序后，可以在选定的目录下通过hugo new site $YOUR_SITE_NAME创建你的博客目录：\n如果不特殊申明，本文接下来的命令行操作都是在$YOUR_SITE_NAME目录下进行的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% hugo new site DHugo Congratulations! Your new Hugo site was created in /home/dm/Test/DHugo. Just a few more steps... 1. Change the current directory to /home/dm/Test/DHugo. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 可以使用tree指令对我们创建的博客目录进行查看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% tree . ├── archetypes │ └── default.md # 博客模板文件 ├── assets # 存放静态资源文件 ├── content # 存放博客文章 ├── data # 存放数据文件 ├── hugo.toml # 博客配置文件，可以修改为hugo.yaml，支持JSON、YAML、TOML三种不同配置文件 ├── i18n # 多语言配置 ├── layouts # 存放布局配置文件 ├── static # 存放静态资源文件，图片、css、js等 └── themes # 存放不同主题 9 directories, 2 files 配置主题 我们在此处的主题选择 PaperMod ，这是一个Star比较高的主题，简约的并且功能较为丰富。当然，你也可以自己选择主题：\n官方的主题网址： https://themes.gohugo.io/ 在此处，官方推荐将我们选择的主题fork一个到自己的账户，并使用git submodule进行仓库的链接，这样以便后续主题的单独维护，避免当自己对主题进行修改之后，后续版本管理和更新会与原先主题产生冲突。\n当然了，我并没有fork一个主题并进行修改，我们通常是将themes/$THEME/对应目录下的文件拷贝一份到我们的项目目录$YOUR_SITE_NAME中对应的文件夹下，相对目录需要相同，以便我们复制的文件可以覆盖他的默认配置。\n1 2 git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 之后在hugo.yaml中添加新的一行启用新主题：\n1 theme = \u0026#34;PaperMod\u0026#34; 修改hugo.yaml配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 baseURL: \u0026#34;https://downmars.github.io\u0026#34; title: \u0026#34;DLog\u0026#34; theme: \u0026#34;PaperMod\u0026#34; # 多语言设置 defaultContentLanguage: zh defaultContentLanguageInSubdir: true params: # 搜索功能 fuseOpts: # 添加：搜索配置 isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] # 社交按钮 socialIcons: - name: github url: \u0026#34;https://github.com/downmars\u0026#34; # 多语言配置 languages: zh: languageCode: \u0026#34;zh-CN\u0026#34; languageName: \u0026#34;简体中文\u0026#34; contentDir: \u0026#34;content/zh\u0026#34; weight: 1 title: \u0026#34;DLog\u0026#34; params: description: \u0026#34;测试描述\u0026#34; profileMode: # 添加：个人主页模式 enabled: true title: \u0026#34;DLog\u0026#34; subtitle: \u0026#34;个人博客\u0026#34; menu: main: - identifier: posts # 添加：标识符 name: \u0026#34;文章\u0026#34; url: \u0026#34;/posts/\u0026#34; weight: 1 # 修正: wight -\u0026gt; weight - identifier: archives # 添加：归档页 name: \u0026#34;归档\u0026#34; url: \u0026#34;/archives/\u0026#34; weight: 2 - identifier: search name: \u0026#34;搜索\u0026#34; url: \u0026#34;/search/\u0026#34; weight: 3 # 输出设置 outputs: home: - HTML - RSS - JSON # 添加：支持搜索功能 初始配置可以参考此设置，我们会在后期进行功能的完善。\n接下来我们分别设置archives、search与尝试通过模板建立一个博客\n1 2 3 mkdir content/zh/posts mkdir content/zh/archives mkdir content/zh/search 1 2 3 4 5 6 7 # touch content/zh/archives/archives.md --- title: \u0026#34;时间轴\u0026#34; layout: \u0026#34;archives\u0026#34; # url: \u0026#34;/archives/\u0026#34; summary: archives --- 1 2 3 4 5 6 7 8 # touch content/zh/search/search.md --- title: \u0026#34;搜索\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary # url: \u0026#34;/archive\u0026#34; # description: \u0026#34;Description for Search\u0026#34; summary: \u0026#34;search\u0026#34; --- ","permalink":"http://localhost:1313/zh/posts/hugo_build_1/","summary":"\u003chr\u003e\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\u003c/p\u003e","title":"Hugo博客搭建_基础 😊"},{"content":"How to make a mkdocs? test\nAssume you have already set up your Github homepage.\nMkdocs 要使用 MkDocs 创建并部署静态网站到 GitHub Pages（即 github.io），并利用您提供的 ci.yml 配置 GitHub Actions 进行持续集成和部署，您可以按照以下步骤操作：\n步骤 1：安装 MkDocs 和相关主题 首先，确保您的本地环境已安装 Python 和 pip。然后，安装 MkDocs 及所需的主题和插件。\n1 pip install mkdocs-material mkdocs-rtd-dropdown 步骤 2：创建 MkDocs 项目 在您的项目目录中，初始化一个新的 MkDocs 项目：\n1 2 mkdocs new my-project cd my-project 这将创建一个基本的 MkDocs 目录结构。\n步骤 3：配置 mkdocs.yml 编辑生成的 mkdocs.yml 文件，配置主题和插件。例如：\n1 2 3 4 5 6 7 8 9 site_name: My Project Documentation theme: name: \u0026#39;material\u0026#39; palette: primary: \u0026#39;blue\u0026#39; accent: \u0026#39;light blue\u0026#39; plugins: - search - rtd-dropdown 确保根据您的需求调整 site_name、主题和插件配置。\n步骤 4：编写文档内容 在 docs/ 目录下编辑或添加 Markdown 文件，以构建您的文档内容。\n步骤 5：初始化 Git 仓库并推送到 GitHub 如果您还没有 Git 仓库，请初始化一个并推送到 GitHub：\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/your-username/your-repo.git git push -u origin main 请将 your-username 和 your-repo 替换为您的 GitHub 用户名和仓库名称。\n步骤 6：创建 GitHub Actions 工作流 在您的项目根目录下，创建 .github/workflows/ci.yml 文件，并将以下内容粘贴进去：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: ci on: push: branches: - master - main permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Configure Git Credentials run: | git config user.name \u0026#34;github-actions[bot]\u0026#34; git config user.email \u0026#34;41898282+github-actions[bot]@users.noreply.github.com\u0026#34; - uses: actions/setup-python@v5 with: python-version: \u0026#39;3.x\u0026#39; - run: echo \u0026#34;cache_id=$(date --utc \u0026#39;+%V\u0026#39;)\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - uses: actions/cache@v4 with: key: mkdocs-material-${{ env.cache_id }} path: .cache restore-keys: | mkdocs-material- - run: pip install mkdocs-material - run: pip install mkdocs-rtd-dropdown - run: mkdocs gh-deploy --force 工作流说明： 触发条件：当推送到 master 或 main 分支时触发。 权限：授予 contents 写权限以便进行部署。 作业配置： 环境：使用最新的 Ubuntu 运行环境。 步骤： 检出代码：使用 actions/checkout@v4 检出仓库代码。 配置 Git 凭证：设置 Git 用户名和邮箱，以便 GitHub Actions 可以提交更改。 设置 Python 环境：使用 actions/setup-python@v5 设置 Python 3 环境。 设置缓存：通过当前的周数作为缓存键的一部分，使用 actions/cache@v4 缓存 .cache 目录，加快后续构建速度。 安装 MkDocs 及插件：安装 mkdocs-material 主题和 mkdocs-rtd-dropdown 插件。 部署到 GitHub Pages：使用 mkdocs gh-deploy --force 强制部署到 GitHub Pages。 步骤 7：配置 GitHub Pages 进入您的 GitHub 仓库页面。 点击 Settings（设置）。 在左侧菜单中选择 Pages。 在 Source 部分，选择 gh-pages 分支（如果 mkdocs gh-deploy 使用的是默认设置），然后点击 Save。 GitHub 将开始部署您的 MkDocs 网站，部署完成后，您可以通过 https://your-username.github.io/your-repo/ 访问您的静态网站。 步骤 8：推送更改触发部署 每当您向 main 或 master 分支推送更改时，GitHub Actions 会自动运行 ci.yml 工作流，构建并部署最新的文档到 GitHub Pages。\n1 2 3 git add . git commit -m \u0026#34;Update documentation\u0026#34; git push origin main 附加提示 自定义域名：如果您有自定义域名，可以在 GitHub Pages 设置中配置。 持续改进：根据需要添加更多 MkDocs 插件或自定义主题配置，以增强文档功能和外观。 安全性：确保您的仓库是私有的（如果需要），并妥善管理访问权限。 通过以上步骤，您应该能够成功创建并部署一个使用 MkDocs 的静态网站到 GitHub Pages，并利用 GitHub Actions 自动化部署流程。如果在过程中遇到任何问题，请检查 GitHub Actions 的日志以获取详细的错误信息，便于调试和解决问题。\n","permalink":"http://localhost:1313/zh/posts/test/","summary":"\u003ch1 id=\"how-to-make-a-mkdocs\"\u003eHow to make a mkdocs?\u003c/h1\u003e\n\u003cp\u003etest\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAssume you have already set up your Github homepage.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.mkdocs.org/\" \n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \u003e\n   Mkdocs\n\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要使用 MkDocs 创建并部署静态网站到 GitHub Pages（即 \u003ccode\u003egithub.io\u003c/code\u003e），并利用您提供的 \u003ccode\u003eci.yml\u003c/code\u003e 配置 GitHub Actions 进行持续集成和部署，您可以按照以下步骤操作：\u003c/p\u003e","title":"Test"},{"content":"","permalink":"http://localhost:1313/zh/posts/build_hugo_and_deploy_with_github/","summary":"","title":"Build_hugo_and_deploy_with_github"},{"content":" 前言 以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\n安装环境 我最近也在将日常的工作娱乐环境转向linux，所以说选择了archlinux作为我的安装环境，之后应该会出一系列我的archlinux的配置。\n本文涉及环境以及工具的网站：\nHugo Github Hugo安装及基础配置 Hugo安装 我是用的是archlinux，所以直接用pacman安装：\n1 sudo pacman -S hugo 安装完之后，可以通过以下命令查看版本：\n1 hugo version Hugo初始化 通过上述命令安装hugo程序后，可以在选定的目录下通过hugo new site $YOUR_SITE_NAME创建你的博客目录：\n如果不特殊申明，本文接下来的命令行操作都是在$YOUR_SITE_NAME目录下进行的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% hugo new site DHugo Congratulations! Your new Hugo site was created in /home/dm/Test/DHugo. Just a few more steps... 1. Change the current directory to /home/dm/Test/DHugo. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 可以使用tree指令对我们创建的博客目录进行查看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% tree . ├── archetypes │ └── default.md # 博客模板文件 ├── assets # 存放静态资源文件 ├── content # 存放博客文章 ├── data # 存放数据文件 ├── hugo.toml # 博客配置文件，可以修改为hugo.yaml，支持JSON、YAML、TOML三种不同配置文件 ├── i18n # 多语言配置 ├── layouts # 存放布局配置文件 ├── static # 存放静态资源文件，图片、css、js等 └── themes # 存放不同主题 9 directories, 2 files 配置主题 我们在此处的主题选择 PaperMod ，这是一个Star比较高的主题，简约的并且功能较为丰富。当然，你也可以自己选择主题：\n官方的主题网址： https://themes.gohugo.io/ 在此处，官方推荐将我们选择的主题fork一个到自己的账户，并使用git submodule进行仓库的链接，这样以便后续主题的单独维护，避免当自己对主题进行修改之后，后续版本管理和更新会与原先主题产生冲突。\n当然了，我并没有fork一个主题并进行修改，我们通常是将themes/$THEME/对应目录下的文件拷贝一份到我们的项目目录$YOUR_SITE_NAME中对应的文件夹下，相对目录需要相同，以便我们复制的文件可以覆盖他的默认配置。\n1 2 git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 之后在hugo.yaml中添加新的一行启用新主题：\n1 theme = \u0026#34;PaperMod\u0026#34; 新建博客 我们可以使用hugo new path/to/your.md来创建你的第一个博客啦！\n1 hugo new posts/test.md 1 2 3 4 5 --- title: \u0026#34;Test\u0026#34; date: 2022-10-21T19:00:43+08:00 draft: true --- 我们接下来就可以使用hugo server --disableFastRender进行本地预览了，通过访问 http://localhost:1313/ 可以在本地预览我们创建的博客了\n","permalink":"http://localhost:1313/zh/posts/hugo_build_1/","summary":"\u003chr\u003e\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\u003c/p\u003e","title":"Hugo博客搭建_基础 😊"},{"content":"How to make a mkdocs? test\nAssume you have already set up your Github homepage.\nMkdocs 要使用 MkDocs 创建并部署静态网站到 GitHub Pages（即 github.io），并利用您提供的 ci.yml 配置 GitHub Actions 进行持续集成和部署，您可以按照以下步骤操作：\n步骤 1：安装 MkDocs 和相关主题 首先，确保您的本地环境已安装 Python 和 pip。然后，安装 MkDocs 及所需的主题和插件。\n1 pip install mkdocs-material mkdocs-rtd-dropdown 步骤 2：创建 MkDocs 项目 在您的项目目录中，初始化一个新的 MkDocs 项目：\n1 2 mkdocs new my-project cd my-project 这将创建一个基本的 MkDocs 目录结构。\n步骤 3：配置 mkdocs.yml 编辑生成的 mkdocs.yml 文件，配置主题和插件。例如：\n1 2 3 4 5 6 7 8 9 site_name: My Project Documentation theme: name: \u0026#39;material\u0026#39; palette: primary: \u0026#39;blue\u0026#39; accent: \u0026#39;light blue\u0026#39; plugins: - search - rtd-dropdown 确保根据您的需求调整 site_name、主题和插件配置。\n步骤 4：编写文档内容 在 docs/ 目录下编辑或添加 Markdown 文件，以构建您的文档内容。\n步骤 5：初始化 Git 仓库并推送到 GitHub 如果您还没有 Git 仓库，请初始化一个并推送到 GitHub：\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/your-username/your-repo.git git push -u origin main 请将 your-username 和 your-repo 替换为您的 GitHub 用户名和仓库名称。\n步骤 6：创建 GitHub Actions 工作流 在您的项目根目录下，创建 .github/workflows/ci.yml 文件，并将以下内容粘贴进去：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: ci on: push: branches: - master - main permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Configure Git Credentials run: | git config user.name \u0026#34;github-actions[bot]\u0026#34; git config user.email \u0026#34;41898282+github-actions[bot]@users.noreply.github.com\u0026#34; - uses: actions/setup-python@v5 with: python-version: \u0026#39;3.x\u0026#39; - run: echo \u0026#34;cache_id=$(date --utc \u0026#39;+%V\u0026#39;)\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - uses: actions/cache@v4 with: key: mkdocs-material-${{ env.cache_id }} path: .cache restore-keys: | mkdocs-material- - run: pip install mkdocs-material - run: pip install mkdocs-rtd-dropdown - run: mkdocs gh-deploy --force 工作流说明： 触发条件：当推送到 master 或 main 分支时触发。 权限：授予 contents 写权限以便进行部署。 作业配置： 环境：使用最新的 Ubuntu 运行环境。 步骤： 检出代码：使用 actions/checkout@v4 检出仓库代码。 配置 Git 凭证：设置 Git 用户名和邮箱，以便 GitHub Actions 可以提交更改。 设置 Python 环境：使用 actions/setup-python@v5 设置 Python 3 环境。 设置缓存：通过当前的周数作为缓存键的一部分，使用 actions/cache@v4 缓存 .cache 目录，加快后续构建速度。 安装 MkDocs 及插件：安装 mkdocs-material 主题和 mkdocs-rtd-dropdown 插件。 部署到 GitHub Pages：使用 mkdocs gh-deploy --force 强制部署到 GitHub Pages。 步骤 7：配置 GitHub Pages 进入您的 GitHub 仓库页面。 点击 Settings（设置）。 在左侧菜单中选择 Pages。 在 Source 部分，选择 gh-pages 分支（如果 mkdocs gh-deploy 使用的是默认设置），然后点击 Save。 GitHub 将开始部署您的 MkDocs 网站，部署完成后，您可以通过 https://your-username.github.io/your-repo/ 访问您的静态网站。 步骤 8：推送更改触发部署 每当您向 main 或 master 分支推送更改时，GitHub Actions 会自动运行 ci.yml 工作流，构建并部署最新的文档到 GitHub Pages。\n1 2 3 git add . git commit -m \u0026#34;Update documentation\u0026#34; git push origin main 附加提示 自定义域名：如果您有自定义域名，可以在 GitHub Pages 设置中配置。 持续改进：根据需要添加更多 MkDocs 插件或自定义主题配置，以增强文档功能和外观。 安全性：确保您的仓库是私有的（如果需要），并妥善管理访问权限。 通过以上步骤，您应该能够成功创建并部署一个使用 MkDocs 的静态网站到 GitHub Pages，并利用 GitHub Actions 自动化部署流程。如果在过程中遇到任何问题，请检查 GitHub Actions 的日志以获取详细的错误信息，便于调试和解决问题。\n","permalink":"http://localhost:1313/zh/posts/test/","summary":"\u003ch1 id=\"how-to-make-a-mkdocs\"\u003eHow to make a mkdocs?\u003c/h1\u003e\n\u003cp\u003etest\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAssume you have already set up your Github homepage.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.mkdocs.org/\" \n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \u003e\n   Mkdocs\n\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要使用 MkDocs 创建并部署静态网站到 GitHub Pages（即 \u003ccode\u003egithub.io\u003c/code\u003e），并利用您提供的 \u003ccode\u003eci.yml\u003c/code\u003e 配置 GitHub Actions 进行持续集成和部署，您可以按照以下步骤操作：\u003c/p\u003e","title":"Test"},{"content":"","permalink":"http://localhost:1313/zh/posts/build_hugo_and_deploy_with_github/","summary":"","title":"Build_hugo_and_deploy_with_github"},{"content":" 前言 以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\n安装环境 我最近也在将日常的工作娱乐环境转向linux，所以说选择了archlinux作为我的安装环境，之后应该会出一系列我的archlinux的配置。\n本文涉及环境以及工具的网站：\nHugo Github Hugo安装及基础配置 Hugo安装 我是用的是archlinux，所以直接用pacman安装：\n1 sudo pacman -S hugo 安装完之后，可以通过以下命令查看版本：\n1 hugo version Hugo初始化 通过上述命令安装hugo程序后，可以在选定的目录下通过hugo new site $YOUR_SITE_NAME创建你的博客目录：\n如果不特殊申明，本文接下来的命令行操作都是在$YOUR_SITE_NAME目录下进行的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% hugo new site DHugo Congratulations! Your new Hugo site was created in /home/dm/Test/DHugo. Just a few more steps... 1. Change the current directory to /home/dm/Test/DHugo. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 可以使用tree指令对我们创建的博客目录进行查看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 myArch% tree . ├── archetypes │ └── default.md # 博客模板文件 ├── assets # 存放静态资源文件 ├── content # 存放博客文章 ├── data # 存放数据文件 ├── hugo.toml # 博客配置文件，可以修改为hugo.yaml，支持JSON、YAML、TOML三种不同配置文件 ├── i18n # 多语言配置 ├── layouts # 存放布局配置文件 ├── static # 存放静态资源文件，图片、css、js等 └── themes # 存放不同主题 9 directories, 2 files 配置主题 我们在此处的主题选择 PaperMod ，这是一个Star比较高的主题，简约的并且功能较为丰富。当然，你也可以自己选择主题：\n官方的主题网址： https://themes.gohugo.io/ 在此处，官方推荐将我们选择的主题fork一个到自己的账户，并使用git submodule进行仓库的链接，这样以便后续主题的单独维护，避免当自己对主题进行修改之后，后续版本管理和更新会与原先主题产生冲突。\n当然了，我并没有fork一个主题并进行修改，我们通常是将themes/$THEME/对应目录下的文件拷贝一份到我们的项目目录$YOUR_SITE_NAME中对应的文件夹下，相对目录需要相同，以便我们复制的文件可以覆盖他的默认配置。\n1 2 git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 之后在hugo.yaml中添加新的一行启用新主题：\n1 theme = \u0026#34;PaperMod\u0026#34; 新建博客 我们可以使用hugo new path/to/your.md来创建你的第一个博客啦！\n1 hugo new posts/test.md 1 2 3 4 5 --- title: \u0026#34;Test\u0026#34; date: 2022-10-21T19:00:43+08:00 draft: true --- 这个命令会在content目录下创建posts目录，并在生成posts/test.md，博文使用Markdown语法完成，我们用默认模板生成的博客是草稿状态，可以将draft设置为false，这样文章就可以发表了。\n我们接下来就可以使用hugo server --disableFastRender进行本地预览了，通过访问 http://localhost:1313/ 可以在本地预览我们创建的博客了。\n","permalink":"http://localhost:1313/zh/posts/hugo_build_1/","summary":"\u003chr\u003e\n\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e以往总是东一笔西一笔写自己的一些内容，也尝试过用MKDOCS来搭建自己的知识库，前段时间看到很多人用Hugo搭建博客，于是也想尝试一下，在这里记录一下搭建与配置的过程。\u003c/p\u003e","title":"Hugo博客搭建_基础 😊"},{"content":"How to make a mkdocs? test\nAssume you have already set up your Github homepage.\nMkdocs 要使用 MkDocs 创建并部署静态网站到 GitHub Pages（即 github.io），并利用您提供的 ci.yml 配置 GitHub Actions 进行持续集成和部署，您可以按照以下步骤操作：\n步骤 1：安装 MkDocs 和相关主题 首先，确保您的本地环境已安装 Python 和 pip。然后，安装 MkDocs 及所需的主题和插件。\n1 pip install mkdocs-material mkdocs-rtd-dropdown 步骤 2：创建 MkDocs 项目 在您的项目目录中，初始化一个新的 MkDocs 项目：\n1 2 mkdocs new my-project cd my-project 这将创建一个基本的 MkDocs 目录结构。\n步骤 3：配置 mkdocs.yml 编辑生成的 mkdocs.yml 文件，配置主题和插件。例如：\n1 2 3 4 5 6 7 8 9 site_name: My Project Documentation theme: name: \u0026#39;material\u0026#39; palette: primary: \u0026#39;blue\u0026#39; accent: \u0026#39;light blue\u0026#39; plugins: - search - rtd-dropdown 确保根据您的需求调整 site_name、主题和插件配置。\n步骤 4：编写文档内容 在 docs/ 目录下编辑或添加 Markdown 文件，以构建您的文档内容。\n步骤 5：初始化 Git 仓库并推送到 GitHub 如果您还没有 Git 仓库，请初始化一个并推送到 GitHub：\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/your-username/your-repo.git git push -u origin main 请将 your-username 和 your-repo 替换为您的 GitHub 用户名和仓库名称。\n步骤 6：创建 GitHub Actions 工作流 在您的项目根目录下，创建 .github/workflows/ci.yml 文件，并将以下内容粘贴进去：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: ci on: push: branches: - master - main permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Configure Git Credentials run: | git config user.name \u0026#34;github-actions[bot]\u0026#34; git config user.email \u0026#34;41898282+github-actions[bot]@users.noreply.github.com\u0026#34; - uses: actions/setup-python@v5 with: python-version: \u0026#39;3.x\u0026#39; - run: echo \u0026#34;cache_id=$(date --utc \u0026#39;+%V\u0026#39;)\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - uses: actions/cache@v4 with: key: mkdocs-material-${{ env.cache_id }} path: .cache restore-keys: | mkdocs-material- - run: pip install mkdocs-material - run: pip install mkdocs-rtd-dropdown - run: mkdocs gh-deploy --force 工作流说明： 触发条件：当推送到 master 或 main 分支时触发。 权限：授予 contents 写权限以便进行部署。 作业配置： 环境：使用最新的 Ubuntu 运行环境。 步骤： 检出代码：使用 actions/checkout@v4 检出仓库代码。 配置 Git 凭证：设置 Git 用户名和邮箱，以便 GitHub Actions 可以提交更改。 设置 Python 环境：使用 actions/setup-python@v5 设置 Python 3 环境。 设置缓存：通过当前的周数作为缓存键的一部分，使用 actions/cache@v4 缓存 .cache 目录，加快后续构建速度。 安装 MkDocs 及插件：安装 mkdocs-material 主题和 mkdocs-rtd-dropdown 插件。 部署到 GitHub Pages：使用 mkdocs gh-deploy --force 强制部署到 GitHub Pages。 步骤 7：配置 GitHub Pages 进入您的 GitHub 仓库页面。 点击 Settings（设置）。 在左侧菜单中选择 Pages。 在 Source 部分，选择 gh-pages 分支（如果 mkdocs gh-deploy 使用的是默认设置），然后点击 Save。 GitHub 将开始部署您的 MkDocs 网站，部署完成后，您可以通过 https://your-username.github.io/your-repo/ 访问您的静态网站。 步骤 8：推送更改触发部署 每当您向 main 或 master 分支推送更改时，GitHub Actions 会自动运行 ci.yml 工作流，构建并部署最新的文档到 GitHub Pages。\n1 2 3 git add . git commit -m \u0026#34;Update documentation\u0026#34; git push origin main 附加提示 自定义域名：如果您有自定义域名，可以在 GitHub Pages 设置中配置。 持续改进：根据需要添加更多 MkDocs 插件或自定义主题配置，以增强文档功能和外观。 安全性：确保您的仓库是私有的（如果需要），并妥善管理访问权限。 通过以上步骤，您应该能够成功创建并部署一个使用 MkDocs 的静态网站到 GitHub Pages，并利用 GitHub Actions 自动化部署流程。如果在过程中遇到任何问题，请检查 GitHub Actions 的日志以获取详细的错误信息，便于调试和解决问题。\n","permalink":"http://localhost:1313/zh/posts/test/","summary":"\u003ch1 id=\"how-to-make-a-mkdocs\"\u003eHow to make a mkdocs?\u003c/h1\u003e\n\u003cp\u003etest\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAssume you have already set up your Github homepage.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.mkdocs.org/\" \n   \n    \n       target=\"_blank\" rel=\"noopener\" \n   \u003e\n   Mkdocs\n\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要使用 MkDocs 创建并部署静态网站到 GitHub Pages（即 \u003ccode\u003egithub.io\u003c/code\u003e），并利用您提供的 \u003ccode\u003eci.yml\u003c/code\u003e 配置 GitHub Actions 进行持续集成和部署，您可以按照以下步骤操作：\u003c/p\u003e","title":"Test"},{"content":"","permalink":"http://localhost:1313/zh/posts/build_hugo_and_deploy_with_github/","summary":"","title":"Build_hugo_and_deploy_with_github"}]